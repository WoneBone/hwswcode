-- ==============================================================
-- Generated by Vitis HLS v2024.1.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity axil_conv2D is
generic (
    C_S_AXI_BUS1_ADDR_WIDTH : INTEGER := 17;
    C_S_AXI_BUS1_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    s_axi_BUS1_AWVALID : IN STD_LOGIC;
    s_axi_BUS1_AWREADY : OUT STD_LOGIC;
    s_axi_BUS1_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_BUS1_ADDR_WIDTH-1 downto 0);
    s_axi_BUS1_WVALID : IN STD_LOGIC;
    s_axi_BUS1_WREADY : OUT STD_LOGIC;
    s_axi_BUS1_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_BUS1_DATA_WIDTH-1 downto 0);
    s_axi_BUS1_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_BUS1_DATA_WIDTH/8-1 downto 0);
    s_axi_BUS1_ARVALID : IN STD_LOGIC;
    s_axi_BUS1_ARREADY : OUT STD_LOGIC;
    s_axi_BUS1_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_BUS1_ADDR_WIDTH-1 downto 0);
    s_axi_BUS1_RVALID : OUT STD_LOGIC;
    s_axi_BUS1_RREADY : IN STD_LOGIC;
    s_axi_BUS1_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_BUS1_DATA_WIDTH-1 downto 0);
    s_axi_BUS1_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_BUS1_BVALID : OUT STD_LOGIC;
    s_axi_BUS1_BREADY : IN STD_LOGIC;
    s_axi_BUS1_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of axil_conv2D is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "axil_conv2D_axil_conv2D,hls_ip_2024_1_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.259000,HLS_SYN_LAT=199706,HLS_SYN_TPT=none,HLS_SYN_MEM=32,HLS_SYN_DSP=0,HLS_SYN_FF=1091,HLS_SYN_LUT=1576,HLS_VERSION=2024_1_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_pp0_stage6 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_pp0_stage7 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_pp0_stage8 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant C_S_AXI_DATA_WIDTH : INTEGER := 32;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv13_2 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000010";
    constant ap_const_lv14_1E40 : STD_LOGIC_VECTOR (13 downto 0) := "01111001000000";
    constant ap_const_lv15_3C80 : STD_LOGIC_VECTOR (14 downto 0) := "011110010000000";
    constant ap_const_lv15_1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv9_102 : STD_LOGIC_VECTOR (8 downto 0) := "100000010";
    constant ap_const_lv15_56AB : STD_LOGIC_VECTOR (14 downto 0) := "101011010101011";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv14_1CE4 : STD_LOGIC_VECTOR (13 downto 0) := "01110011100100";
    constant ap_const_lv15_39C8 : STD_LOGIC_VECTOR (14 downto 0) := "011100111001000";
    constant ap_const_lv13_58 : STD_LOGIC_VECTOR (12 downto 0) := "0000001011000";
    constant ap_const_lv13_56 : STD_LOGIC_VECTOR (12 downto 0) := "0000001010110";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_ready : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage8 : signal is "none";
    signal ap_block_pp0_stage8_subdone : BOOLEAN;
    signal icmp_ln24_fu_629_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage8 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal image_in_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal weights_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal bias : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln2627_reg_303 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln2627_reg_303_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln2627_reg_303_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal reg_324 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp0_stage5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage5 : signal is "none";
    signal ap_block_pp0_stage5_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal acc_red_fu_328_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal acc_red_reg_1156 : STD_LOGIC_VECTOR (20 downto 0);
    signal acc_red_reg_1156_pp0_iter1_reg : STD_LOGIC_VECTOR (20 downto 0);
    signal acc_red_reg_1156_pp0_iter2_reg : STD_LOGIC_VECTOR (20 downto 0);
    signal and_ln24_fu_392_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln24_reg_1166 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln24_reg_1166_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln24_reg_1166_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_2_fu_398_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_2_reg_1174 : STD_LOGIC_VECTOR (6 downto 0);
    signal k_mid2_fu_412_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal k_mid2_reg_1181 : STD_LOGIC_VECTOR (1 downto 0);
    signal sub_ln37_fu_434_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln37_reg_1188 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln37_reg_1188_pp0_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln38_fu_440_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln38_reg_1193 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln33_fu_460_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln33_reg_1203 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln33_reg_1203_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln33_reg_1203_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln26_1_fu_509_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln26_1_reg_1208 : STD_LOGIC_VECTOR (12 downto 0);
    signal weights_load_2_reg_1214 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1029_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal image_1d_idx_reg_1219 : STD_LOGIC_VECTOR (12 downto 0);
    signal weights_load_1_reg_1238 : STD_LOGIC_VECTOR (7 downto 0);
    signal image_1d_idx_2_fu_531_p2 : STD_LOGIC_VECTOR (12 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of image_1d_idx_2_fu_531_p2 : signal is "no";
    signal image_1d_idx_2_reg_1243 : STD_LOGIC_VECTOR (12 downto 0);
    signal image_in_load_7_reg_1259 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp0_stage6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage6 : signal is "none";
    signal ap_block_pp0_stage6_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage7 : signal is "none";
    signal ap_block_pp0_stage7_11001 : BOOLEAN;
    signal image_in_load_8_reg_1274 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1039_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln76_reg_1279 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln76_reg_1279_pp0_iter1_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal image_in_load_1_reg_1286 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage8_11001 : BOOLEAN;
    signal icmp_ln26_fu_623_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln26_reg_1296 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_reg_1301 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_reg_1301_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal image_in_load_2_reg_1305 : STD_LOGIC_VECTOR (7 downto 0);
    signal image_1d_idx_1_fu_645_p2 : STD_LOGIC_VECTOR (12 downto 0);
    attribute use_dsp48 of image_1d_idx_1_fu_645_p2 : signal is "no";
    signal image_1d_idx_1_reg_1310 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln41_2_fu_669_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln41_2_reg_1326 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln41_1_fu_680_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln41_1_reg_1343 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln41_1_fu_687_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln41_1_reg_1349 : STD_LOGIC_VECTOR (15 downto 0);
    signal weights_load_reg_1364 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln42_1_fu_721_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln42_1_reg_1379 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln43_1_fu_736_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln43_1_reg_1394 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1046_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln41_reg_1399 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln41_fu_741_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln41_reg_1404 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1054_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln42_3_reg_1421 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_1061_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln43_3_reg_1431 : STD_LOGIC_VECTOR (16 downto 0);
    signal acc_red_1_fu_779_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal acc_red_1_reg_1446 : STD_LOGIC_VECTOR (20 downto 0);
    signal icmp_ln54_fu_798_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_reg_1457 : STD_LOGIC_VECTOR (0 downto 0);
    signal acc_green_fu_828_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal acc_green_reg_1463 : STD_LOGIC_VECTOR (20 downto 0);
    signal icmp_ln61_fu_854_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln61_reg_1474 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln76_fu_875_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal acc_blue_fu_912_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal acc_blue_reg_1490 : STD_LOGIC_VECTOR (20 downto 0);
    signal icmp_ln68_fu_935_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln68_reg_1496 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln77_fu_956_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln78_fu_1009_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_phi_mux_icmp_ln2627_phi_fu_306_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_icmp_ln3326_phi_fu_317_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln40_1_fu_450_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln40_fu_523_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal zext_ln41_4_fu_536_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal zext_ln42_7_fu_550_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage5 : BOOLEAN;
    signal zext_ln43_4_fu_564_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage6 : BOOLEAN;
    signal zext_ln42_1_fu_578_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage7 : BOOLEAN;
    signal zext_ln43_fu_598_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage8 : BOOLEAN;
    signal zext_ln41_2_fu_650_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln42_4_fu_664_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln38_fu_676_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal zext_ln43_2_fu_702_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln41_fu_710_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln76_fu_884_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln77_1_fu_974_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln78_fu_1024_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal indvar_flatten1518_fu_126 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    signal add_ln24_fu_603_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal i19_fu_130 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    signal ap_sig_allocacmp_i19_load : STD_LOGIC_VECTOR (6 downto 0);
    signal indvar_flatten20_fu_134 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    signal select_ln26_1_fu_615_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal j21_fu_138 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    signal j_fu_502_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal k22_fu_142 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal k_fu_455_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_sig_allocacmp_k22_load : STD_LOGIC_VECTOR (1 downto 0);
    signal acc_blue_123_fu_146 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000000";
    signal acc_green24_fu_150 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000000";
    signal acc_red25_fu_154 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000000";
    signal i_128_fu_158 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    signal i_fu_466_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_allocacmp_i_128_load : STD_LOGIC_VECTOR (6 downto 0);
    signal weights_ce0_local : STD_LOGIC;
    signal weights_address0_local : STD_LOGIC_VECTOR (3 downto 0);
    signal image_in_ce0_local : STD_LOGIC;
    signal image_in_address0_local : STD_LOGIC_VECTOR (14 downto 0);
    signal image_out_we0_local : STD_LOGIC;
    signal image_out_d0_local : STD_LOGIC_VECTOR (7 downto 0);
    signal image_out_ce0_local : STD_LOGIC;
    signal image_out_address0_local : STD_LOGIC_VECTOR (14 downto 0);
    signal xor_ln24_fu_386_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_fu_406_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_shl_fu_427_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln33_fu_424_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln40_2_fu_444_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln24_fu_488_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_2_fu_496_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln40_fu_518_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln42_11_fu_541_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln42_2_fu_544_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln42_10_fu_555_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln43_2_fu_558_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln42_3_fu_569_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln42_fu_572_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln42_fu_589_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln43_fu_592_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln26_1_fu_609_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln42_9_fu_655_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln42_1_fu_658_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln41_1_fu_687_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln42_6_fu_693_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln43_1_fu_696_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln42_1_fu_721_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln42_1_fu_721_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln43_1_fu_736_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln43_1_fu_736_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln24_3_fu_763_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_1068_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal acc_red_mid2_fu_770_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal sext_ln41_5_fu_776_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_fu_788_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal select_ln24_2_fu_812_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_1077_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal acc_green_mid2_fu_819_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal sext_ln42_4_fu_825_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_2_fu_844_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_1_fu_837_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln76_fu_870_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln76_1_fu_863_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln76_fu_860_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln24_1_fu_896_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_1085_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal acc_blue_1_mid2_fu_903_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal sext_ln43_4_fu_909_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_4_fu_925_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_3_fu_918_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln77_fu_951_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln77_1_fu_944_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln77_fu_941_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln77_2_fu_965_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln77_fu_968_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_5_fu_984_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln78_fu_1004_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln78_1_fu_997_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln78_fu_994_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln77_fu_991_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln78_fu_1018_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_1029_p0 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_1029_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_1029_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_1029_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_1039_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_1039_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_1039_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_1046_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1054_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1054_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1061_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1061_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1068_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1077_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1077_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1085_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1085_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter2_stage3 : STD_LOGIC;
    signal ap_idle_pp0_0to1 : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_idle_pp0_1to2 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_block_pp0_stage5_subdone : BOOLEAN;
    signal ap_block_pp0_stage6_subdone : BOOLEAN;
    signal ap_block_pp0_stage7_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal grp_fu_1029_p00 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_1029_p30 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_1039_p00 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_1046_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1054_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1061_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1068_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1077_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1085_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln41_1_fu_687_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln42_1_fu_721_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln43_1_fu_736_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_condition_1120 : BOOLEAN;
    signal ap_condition_1124 : BOOLEAN;
    signal ap_condition_1129 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component axil_conv2D_mul_8ns_8s_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component axil_conv2D_ama_addmuladd_2ns_7ns_7ns_7ns_13_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (1 downto 0);
        din1 : IN STD_LOGIC_VECTOR (6 downto 0);
        din2 : IN STD_LOGIC_VECTOR (6 downto 0);
        din3 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;


    component axil_conv2D_mac_muladd_7ns_7ns_7ns_13_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (6 downto 0);
        din1 : IN STD_LOGIC_VECTOR (6 downto 0);
        din2 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;


    component axil_conv2D_mac_muladd_8ns_8s_16s_17_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;


    component axil_conv2D_mac_muladd_8ns_8s_17s_18_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (16 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component axil_conv2D_BUS1_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        weights_address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        weights_ce0 : IN STD_LOGIC;
        weights_q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        bias : OUT STD_LOGIC_VECTOR (31 downto 0);
        image_in_address0 : IN STD_LOGIC_VECTOR (14 downto 0);
        image_in_ce0 : IN STD_LOGIC;
        image_in_q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        image_out_address0 : IN STD_LOGIC_VECTOR (14 downto 0);
        image_out_ce0 : IN STD_LOGIC;
        image_out_we0 : IN STD_LOGIC;
        image_out_d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component axil_conv2D_flow_control_loop_delay_pipe IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_loop_exit_ready_delayed : IN STD_LOGIC );
    end component;



begin
    BUS1_s_axi_U : component axil_conv2D_BUS1_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_BUS1_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_BUS1_DATA_WIDTH)
    port map (
        AWVALID => s_axi_BUS1_AWVALID,
        AWREADY => s_axi_BUS1_AWREADY,
        AWADDR => s_axi_BUS1_AWADDR,
        WVALID => s_axi_BUS1_WVALID,
        WREADY => s_axi_BUS1_WREADY,
        WDATA => s_axi_BUS1_WDATA,
        WSTRB => s_axi_BUS1_WSTRB,
        ARVALID => s_axi_BUS1_ARVALID,
        ARREADY => s_axi_BUS1_ARREADY,
        ARADDR => s_axi_BUS1_ARADDR,
        RVALID => s_axi_BUS1_RVALID,
        RREADY => s_axi_BUS1_RREADY,
        RDATA => s_axi_BUS1_RDATA,
        RRESP => s_axi_BUS1_RRESP,
        BVALID => s_axi_BUS1_BVALID,
        BREADY => s_axi_BUS1_BREADY,
        BRESP => s_axi_BUS1_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        weights_address0 => weights_address0_local,
        weights_ce0 => weights_ce0_local,
        weights_q0 => weights_q0,
        bias => bias,
        image_in_address0 => image_in_address0_local,
        image_in_ce0 => image_in_ce0_local,
        image_in_q0 => image_in_q0,
        image_out_address0 => image_out_address0_local,
        image_out_ce0 => image_out_ce0_local,
        image_out_we0 => image_out_we0_local,
        image_out_d0 => image_out_d0_local,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    mul_8ns_8s_16_1_1_U1 : component axil_conv2D_mul_8ns_8s_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => mul_ln41_1_fu_687_p0,
        din1 => weights_load_1_reg_1238,
        dout => mul_ln41_1_fu_687_p2);

    mul_8ns_8s_16_1_1_U2 : component axil_conv2D_mul_8ns_8s_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => mul_ln42_1_fu_721_p0,
        din1 => mul_ln42_1_fu_721_p1,
        dout => mul_ln42_1_fu_721_p2);

    mul_8ns_8s_16_1_1_U3 : component axil_conv2D_mul_8ns_8s_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => mul_ln43_1_fu_736_p0,
        din1 => mul_ln43_1_fu_736_p1,
        dout => mul_ln43_1_fu_736_p2);

    ama_addmuladd_2ns_7ns_7ns_7ns_13_4_1_U4 : component axil_conv2D_ama_addmuladd_2ns_7ns_7ns_7ns_13_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 2,
        din1_WIDTH => 7,
        din2_WIDTH => 7,
        din3_WIDTH => 7,
        dout_WIDTH => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1029_p0,
        din1 => grp_fu_1029_p1,
        din2 => grp_fu_1029_p2,
        din3 => grp_fu_1029_p3,
        ce => ap_const_logic_1,
        dout => grp_fu_1029_p4);

    mac_muladd_7ns_7ns_7ns_13_4_1_U5 : component axil_conv2D_mac_muladd_7ns_7ns_7ns_13_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 7,
        din1_WIDTH => 7,
        din2_WIDTH => 7,
        dout_WIDTH => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1039_p0,
        din1 => grp_fu_1039_p1,
        din2 => grp_fu_1039_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1039_p3);

    mac_muladd_8ns_8s_16s_17_4_1_U6 : component axil_conv2D_mac_muladd_8ns_8s_16s_17_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1046_p0,
        din1 => weights_load_2_reg_1214,
        din2 => mul_ln41_1_reg_1349,
        ce => ap_const_logic_1,
        dout => grp_fu_1046_p3);

    mac_muladd_8ns_8s_16s_17_4_1_U7 : component axil_conv2D_mac_muladd_8ns_8s_16s_17_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1054_p0,
        din1 => grp_fu_1054_p1,
        din2 => mul_ln42_1_reg_1379,
        ce => ap_const_logic_1,
        dout => grp_fu_1054_p3);

    mac_muladd_8ns_8s_16s_17_4_1_U8 : component axil_conv2D_mac_muladd_8ns_8s_16s_17_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1061_p0,
        din1 => grp_fu_1061_p1,
        din2 => mul_ln43_1_reg_1394,
        ce => ap_const_logic_1,
        dout => grp_fu_1061_p3);

    mac_muladd_8ns_8s_17s_18_4_1_U9 : component axil_conv2D_mac_muladd_8ns_8s_17s_18_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 17,
        dout_WIDTH => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1068_p0,
        din1 => weights_load_reg_1364,
        din2 => add_ln41_reg_1399,
        ce => ap_const_logic_1,
        dout => grp_fu_1068_p3);

    mac_muladd_8ns_8s_17s_18_4_1_U10 : component axil_conv2D_mac_muladd_8ns_8s_17s_18_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 17,
        dout_WIDTH => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1077_p0,
        din1 => grp_fu_1077_p1,
        din2 => add_ln42_3_reg_1421,
        ce => ap_const_logic_1,
        dout => grp_fu_1077_p3);

    mac_muladd_8ns_8s_17s_18_4_1_U11 : component axil_conv2D_mac_muladd_8ns_8s_17s_18_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 17,
        dout_WIDTH => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1085_p0,
        din1 => grp_fu_1085_p1,
        din2 => add_ln43_3_reg_1431,
        ce => ap_const_logic_1,
        dout => grp_fu_1085_p3);

    flow_control_loop_delay_pipe_U : component axil_conv2D_flow_control_loop_delay_pipe
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage8,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int,
        ap_continue => ap_const_logic_1,
        ap_loop_exit_ready_delayed => ap_loop_exit_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage8_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage8_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    acc_blue_123_fu_146_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                acc_blue_123_fu_146 <= acc_red_fu_328_p1;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                acc_blue_123_fu_146 <= acc_blue_fu_912_p2;
            end if; 
        end if;
    end process;

    acc_green24_fu_150_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    acc_green24_fu_150 <= acc_red_fu_328_p1;
                elsif ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then 
                    acc_green24_fu_150 <= acc_green_fu_828_p2;
                end if;
            end if; 
        end if;
    end process;

    acc_red25_fu_154_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                acc_red25_fu_154 <= acc_red_fu_328_p1;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then 
                acc_red25_fu_154 <= acc_red_1_fu_779_p2;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter1_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to1 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter2_stage3))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter2_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_idle_pp0_0to1 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter2_stage3)) or ((ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
            end if; 
        end if;
    end process;

    i19_fu_130_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
                if ((ap_const_boolean_1 = ap_condition_1124)) then 
                    i19_fu_130 <= ap_const_lv7_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    i19_fu_130 <= i_2_reg_1174;
                end if;
            end if; 
        end if;
    end process;

    i_128_fu_158_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
                if ((ap_const_boolean_1 = ap_condition_1124)) then 
                    i_128_fu_158 <= ap_const_lv7_1;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    i_128_fu_158 <= i_fu_466_p2;
                end if;
            end if; 
        end if;
    end process;

    icmp_ln2627_reg_303_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then
                if ((ap_const_boolean_1 = ap_condition_1129)) then 
                    icmp_ln2627_reg_303 <= icmp_ln26_reg_1296;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_init = ap_const_logic_1))) then 
                    icmp_ln2627_reg_303 <= ap_const_lv1_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten1518_fu_126_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
                if ((ap_const_boolean_1 = ap_condition_1124)) then 
                    indvar_flatten1518_fu_126 <= ap_const_lv15_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then 
                    indvar_flatten1518_fu_126 <= add_ln24_fu_603_p2;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten20_fu_134_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
                if ((ap_const_boolean_1 = ap_condition_1124)) then 
                    indvar_flatten20_fu_134 <= ap_const_lv9_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then 
                    indvar_flatten20_fu_134 <= select_ln26_1_fu_615_p3;
                end if;
            end if; 
        end if;
    end process;

    j21_fu_138_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
                if ((ap_const_boolean_1 = ap_condition_1124)) then 
                    j21_fu_138 <= ap_const_lv7_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    j21_fu_138 <= j_fu_502_p3;
                end if;
            end if; 
        end if;
    end process;

    k22_fu_142_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
                if ((ap_const_boolean_1 = ap_condition_1124)) then 
                    k22_fu_142 <= ap_const_lv2_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    k22_fu_142 <= k_fu_455_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                acc_blue_reg_1490 <= acc_blue_fu_912_p2;
                icmp_ln33_reg_1203_pp0_iter1_reg <= icmp_ln33_reg_1203;
                icmp_ln33_reg_1203_pp0_iter2_reg <= icmp_ln33_reg_1203_pp0_iter1_reg;
                icmp_ln68_reg_1496 <= icmp_ln68_fu_935_p2;
                sext_ln41_2_reg_1326 <= sext_ln41_2_fu_669_p1;
                sub_ln37_reg_1188 <= sub_ln37_fu_434_p2;
                sub_ln37_reg_1188_pp0_iter1_reg <= sub_ln37_reg_1188;
                trunc_ln38_reg_1193 <= trunc_ln38_fu_440_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                acc_green_reg_1463 <= acc_green_fu_828_p2;
                acc_red_reg_1156 <= acc_red_fu_328_p1;
                acc_red_reg_1156_pp0_iter1_reg <= acc_red_reg_1156;
                acc_red_reg_1156_pp0_iter2_reg <= acc_red_reg_1156_pp0_iter1_reg;
                and_ln24_reg_1166 <= and_ln24_fu_392_p2;
                and_ln24_reg_1166_pp0_iter1_reg <= and_ln24_reg_1166;
                and_ln24_reg_1166_pp0_iter2_reg <= and_ln24_reg_1166_pp0_iter1_reg;
                i_2_reg_1174 <= i_2_fu_398_p3;
                icmp_ln2627_reg_303_pp0_iter1_reg <= icmp_ln2627_reg_303;
                icmp_ln2627_reg_303_pp0_iter2_reg <= icmp_ln2627_reg_303_pp0_iter1_reg;
                icmp_ln61_reg_1474 <= icmp_ln61_fu_854_p2;
                image_1d_idx_1_reg_1310 <= image_1d_idx_1_fu_645_p2;
                k_mid2_reg_1181 <= k_mid2_fu_412_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then
                acc_red_1_reg_1446 <= acc_red_1_fu_779_p2;
                icmp_ln24_reg_1301 <= icmp_ln24_fu_629_p2;
                icmp_ln24_reg_1301_pp0_iter1_reg <= icmp_ln24_reg_1301;
                icmp_ln54_reg_1457 <= icmp_ln54_fu_798_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then
                add_ln41_reg_1399 <= grp_fu_1046_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then
                add_ln42_3_reg_1421 <= grp_fu_1054_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then
                add_ln43_3_reg_1431 <= grp_fu_1061_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then
                add_ln76_reg_1279 <= grp_fu_1039_p3;
                image_in_load_8_reg_1274 <= image_in_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then
                add_ln76_reg_1279_pp0_iter1_reg <= add_ln76_reg_1279;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then
                icmp_ln26_reg_1296 <= icmp_ln26_fu_623_p2;
                image_in_load_1_reg_1286 <= image_in_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                icmp_ln33_reg_1203 <= icmp_ln33_fu_460_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then
                image_1d_idx_2_reg_1243 <= image_1d_idx_2_fu_531_p2;
                mul_ln43_1_reg_1394 <= mul_ln43_1_fu_736_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                image_1d_idx_reg_1219 <= grp_fu_1029_p4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                image_in_load_2_reg_1305 <= image_in_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then
                image_in_load_7_reg_1259 <= image_in_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                mul_ln41_1_reg_1349 <= mul_ln41_1_fu_687_p2;
                sext_ln41_1_reg_1343 <= sext_ln41_1_fu_680_p1;
                    zext_ln26_1_reg_1208(6 downto 0) <= zext_ln26_1_fu_509_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                mul_ln42_1_reg_1379 <= mul_ln42_1_fu_721_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then
                reg_324 <= image_in_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then
                sext_ln41_reg_1404 <= sext_ln41_fu_741_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then
                weights_load_1_reg_1238 <= weights_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                weights_load_2_reg_1214 <= weights_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                weights_load_reg_1364 <= weights_q0;
            end if;
        end if;
    end process;
    zext_ln26_1_reg_1208(12 downto 7) <= "000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage8_subdone, ap_block_pp0_stage3_subdone, ap_block_pp0_stage0_subdone, ap_condition_exit_pp0_iter2_stage3, ap_idle_pp0_0to1, ap_idle_pp0_1to2, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage4_subdone, ap_block_pp0_stage5_subdone, ap_block_pp0_stage6_subdone, ap_block_pp0_stage7_subdone, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to2 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if (((ap_idle_pp0_0to1 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter2_stage3))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_pp0_stage5 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage5_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                end if;
            when ap_ST_fsm_pp0_stage6 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage6_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                end if;
            when ap_ST_fsm_pp0_stage7 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage7_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                end if;
            when ap_ST_fsm_pp0_stage8 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage8_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;
    acc_blue_1_mid2_fu_903_p3 <= 
        acc_red_reg_1156_pp0_iter2_reg when (and_ln24_reg_1166_pp0_iter2_reg(0) = '1') else 
        select_ln24_1_fu_896_p3;
    acc_blue_fu_912_p2 <= std_logic_vector(unsigned(acc_blue_1_mid2_fu_903_p3) + unsigned(sext_ln43_4_fu_909_p1));
    acc_green_fu_828_p2 <= std_logic_vector(unsigned(acc_green_mid2_fu_819_p3) + unsigned(sext_ln42_4_fu_825_p1));
    acc_green_mid2_fu_819_p3 <= 
        acc_red_reg_1156_pp0_iter1_reg when (and_ln24_reg_1166_pp0_iter1_reg(0) = '1') else 
        select_ln24_2_fu_812_p3;
    acc_red_1_fu_779_p2 <= std_logic_vector(unsigned(acc_red_mid2_fu_770_p3) + unsigned(sext_ln41_5_fu_776_p1));
    acc_red_fu_328_p1 <= bias(21 - 1 downto 0);
    acc_red_mid2_fu_770_p3 <= 
        acc_red_reg_1156_pp0_iter1_reg when (and_ln24_reg_1166_pp0_iter1_reg(0) = '1') else 
        select_ln24_3_fu_763_p3;
    add_ln24_fu_603_p2 <= std_logic_vector(unsigned(indvar_flatten1518_fu_126) + unsigned(ap_const_lv15_1));
    add_ln26_1_fu_609_p2 <= std_logic_vector(unsigned(indvar_flatten20_fu_134) + unsigned(ap_const_lv9_1));
    add_ln40_2_fu_444_p2 <= std_logic_vector(unsigned(sub_ln37_fu_434_p2) + unsigned(ap_const_lv4_2));
    add_ln40_fu_518_p2 <= std_logic_vector(unsigned(trunc_ln38_reg_1193) + unsigned(ap_const_lv3_1));
    add_ln42_1_fu_658_p2 <= std_logic_vector(unsigned(zext_ln42_9_fu_655_p1) + unsigned(ap_const_lv14_1E40));
    add_ln42_2_fu_544_p2 <= std_logic_vector(unsigned(zext_ln42_11_fu_541_p1) + unsigned(ap_const_lv14_1E40));
    add_ln42_fu_572_p2 <= std_logic_vector(unsigned(zext_ln42_3_fu_569_p1) + unsigned(ap_const_lv14_1E40));
    add_ln43_1_fu_696_p2 <= std_logic_vector(unsigned(zext_ln42_6_fu_693_p1) + unsigned(ap_const_lv15_3C80));
    add_ln43_2_fu_558_p2 <= std_logic_vector(unsigned(zext_ln42_10_fu_555_p1) + unsigned(ap_const_lv15_3C80));
    add_ln43_fu_592_p2 <= std_logic_vector(unsigned(zext_ln42_fu_589_p1) + unsigned(ap_const_lv15_3C80));
    add_ln77_fu_968_p2 <= std_logic_vector(unsigned(zext_ln77_2_fu_965_p1) + unsigned(ap_const_lv14_1CE4));
    add_ln78_fu_1018_p2 <= std_logic_vector(unsigned(zext_ln77_fu_991_p1) + unsigned(ap_const_lv15_39C8));
    and_ln24_fu_392_p2 <= (xor_ln24_fu_386_p2 and ap_phi_mux_icmp_ln3326_phi_fu_317_p4);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage5 <= ap_CS_fsm(5);
    ap_CS_fsm_pp0_stage6 <= ap_CS_fsm(6);
    ap_CS_fsm_pp0_stage7 <= ap_CS_fsm(7);
    ap_CS_fsm_pp0_stage8 <= ap_CS_fsm(8);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_1120_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln24_reg_1301, ap_block_pp0_stage0)
    begin
                ap_condition_1120 <= ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln24_reg_1301 = ap_const_lv1_0));
    end process;


    ap_condition_1124_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_loop_init)
    begin
                ap_condition_1124 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_1129_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, icmp_ln24_reg_1301)
    begin
                ap_condition_1129 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln24_reg_1301 = ap_const_lv1_0));
    end process;


    ap_condition_exit_pp0_iter0_stage8_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage8_subdone, icmp_ln24_fu_629_p2)
    begin
        if (((icmp_ln24_fu_629_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage8_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then 
            ap_condition_exit_pp0_iter0_stage8 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage8 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter2_stage3_assign_proc : process(ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage3, icmp_ln24_reg_1301_pp0_iter1_reg, ap_block_pp0_stage3_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln24_reg_1301_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            ap_condition_exit_pp0_iter2_stage3 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter2_stage3 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_start_int = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to2_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to2 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_loop_exit_done_int_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_subdone, ap_loop_exit_ready_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1))) then 
            ap_loop_exit_done_int <= ap_const_logic_1;
        else 
            ap_loop_exit_done_int <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage8;

    ap_phi_mux_icmp_ln2627_phi_fu_306_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln26_reg_1296, ap_loop_init, ap_condition_1120)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then
            if ((ap_const_boolean_1 = ap_condition_1120)) then 
                ap_phi_mux_icmp_ln2627_phi_fu_306_p4 <= icmp_ln26_reg_1296;
            elsif ((ap_loop_init = ap_const_logic_1)) then 
                ap_phi_mux_icmp_ln2627_phi_fu_306_p4 <= ap_const_lv1_0;
            else 
                ap_phi_mux_icmp_ln2627_phi_fu_306_p4 <= icmp_ln26_reg_1296;
            end if;
        else 
            ap_phi_mux_icmp_ln2627_phi_fu_306_p4 <= icmp_ln26_reg_1296;
        end if; 
    end process;


    ap_phi_mux_icmp_ln3326_phi_fu_317_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln33_reg_1203, ap_loop_init, ap_condition_1120)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then
            if ((ap_const_boolean_1 = ap_condition_1120)) then 
                ap_phi_mux_icmp_ln3326_phi_fu_317_p4 <= icmp_ln33_reg_1203;
            elsif ((ap_loop_init = ap_const_logic_1)) then 
                ap_phi_mux_icmp_ln3326_phi_fu_317_p4 <= ap_const_lv1_0;
            else 
                ap_phi_mux_icmp_ln3326_phi_fu_317_p4 <= icmp_ln33_reg_1203;
            end if;
        else 
            ap_phi_mux_icmp_ln3326_phi_fu_317_p4 <= icmp_ln33_reg_1203;
        end if; 
    end process;

    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage8_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage8_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_allocacmp_i19_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_loop_init, ap_block_pp0_stage0, i19_fu_130)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i19_load <= ap_const_lv7_0;
        else 
            ap_sig_allocacmp_i19_load <= i19_fu_130;
        end if; 
    end process;


    ap_sig_allocacmp_i_128_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_loop_init, ap_block_pp0_stage0, i_128_fu_158)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i_128_load <= ap_const_lv7_1;
        else 
            ap_sig_allocacmp_i_128_load <= i_128_fu_158;
        end if; 
    end process;


    ap_sig_allocacmp_k22_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_loop_init, ap_block_pp0_stage0, k22_fu_142)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_k22_load <= ap_const_lv2_0;
        else 
            ap_sig_allocacmp_k22_load <= k22_fu_142;
        end if; 
    end process;

    empty_fu_406_p2 <= (ap_phi_mux_icmp_ln2627_phi_fu_306_p4 or and_ln24_fu_392_p2);
    grp_fu_1029_p0 <= grp_fu_1029_p00(2 - 1 downto 0);
    grp_fu_1029_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_mid2_fu_412_p3),7));
    grp_fu_1029_p1 <= 
        ap_sig_allocacmp_i_128_load when (ap_phi_mux_icmp_ln2627_phi_fu_306_p4(0) = '1') else 
        ap_sig_allocacmp_i19_load;
    grp_fu_1029_p2 <= ap_const_lv13_58(7 - 1 downto 0);
    grp_fu_1029_p3 <= grp_fu_1029_p30(7 - 1 downto 0);
    grp_fu_1029_p30 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_fu_502_p3),13));
    grp_fu_1039_p0 <= grp_fu_1039_p00(7 - 1 downto 0);
    grp_fu_1039_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_reg_1174),13));
    grp_fu_1039_p1 <= ap_const_lv13_56(7 - 1 downto 0);
    grp_fu_1039_p2 <= zext_ln26_1_reg_1208(7 - 1 downto 0);
    grp_fu_1046_p0 <= grp_fu_1046_p00(8 - 1 downto 0);
    grp_fu_1046_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_324),16));
    grp_fu_1054_p0 <= grp_fu_1054_p00(8 - 1 downto 0);
    grp_fu_1054_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(image_in_load_7_reg_1259),16));
    grp_fu_1054_p1 <= sext_ln41_2_reg_1326(8 - 1 downto 0);
    grp_fu_1061_p0 <= grp_fu_1061_p00(8 - 1 downto 0);
    grp_fu_1061_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(image_in_load_8_reg_1274),16));
    grp_fu_1061_p1 <= sext_ln41_2_reg_1326(8 - 1 downto 0);
    grp_fu_1068_p0 <= grp_fu_1068_p00(8 - 1 downto 0);
    grp_fu_1068_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_324),16));
    grp_fu_1077_p0 <= grp_fu_1077_p00(8 - 1 downto 0);
    grp_fu_1077_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(image_in_load_1_reg_1286),16));
    grp_fu_1077_p1 <= sext_ln41_reg_1404(8 - 1 downto 0);
    grp_fu_1085_p0 <= grp_fu_1085_p00(8 - 1 downto 0);
    grp_fu_1085_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(image_in_load_2_reg_1305),16));
    grp_fu_1085_p1 <= sext_ln41_reg_1404(8 - 1 downto 0);
    i_2_fu_398_p3 <= 
        ap_sig_allocacmp_i_128_load when (ap_phi_mux_icmp_ln2627_phi_fu_306_p4(0) = '1') else 
        ap_sig_allocacmp_i19_load;
    i_fu_466_p2 <= std_logic_vector(unsigned(i_2_reg_1174) + unsigned(ap_const_lv7_1));
    icmp_ln24_fu_629_p2 <= "1" when (indvar_flatten1518_fu_126 = ap_const_lv15_56AB) else "0";
    icmp_ln26_fu_623_p2 <= "1" when (select_ln26_1_fu_615_p3 = ap_const_lv9_102) else "0";
    icmp_ln33_fu_460_p2 <= "1" when (k_fu_455_p2 = ap_const_lv2_3) else "0";
    icmp_ln54_fu_798_p2 <= "1" when (signed(tmp_fu_788_p4) > signed(ap_const_lv13_0)) else "0";
    icmp_ln61_fu_854_p2 <= "1" when (signed(tmp_2_fu_844_p4) > signed(ap_const_lv13_0)) else "0";
    icmp_ln68_fu_935_p2 <= "1" when (signed(tmp_4_fu_925_p4) > signed(ap_const_lv13_0)) else "0";
    image_1d_idx_1_fu_645_p2 <= std_logic_vector(unsigned(image_1d_idx_reg_1219) + unsigned(ap_const_lv13_1));
    image_1d_idx_2_fu_531_p2 <= std_logic_vector(unsigned(image_1d_idx_reg_1219) + unsigned(ap_const_lv13_2));

    image_in_address0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage8, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage3, zext_ln41_4_fu_536_p1, ap_block_pp0_stage4, zext_ln42_7_fu_550_p1, ap_block_pp0_stage5, zext_ln43_4_fu_564_p1, ap_block_pp0_stage6, zext_ln42_1_fu_578_p1, ap_block_pp0_stage7, zext_ln43_fu_598_p1, ap_block_pp0_stage8, zext_ln41_2_fu_650_p1, zext_ln42_4_fu_664_p1, ap_block_pp0_stage2, zext_ln43_2_fu_702_p1, zext_ln41_fu_710_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            image_in_address0_local <= zext_ln41_fu_710_p1(15 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            image_in_address0_local <= zext_ln43_2_fu_702_p1(15 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            image_in_address0_local <= zext_ln42_4_fu_664_p1(15 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            image_in_address0_local <= zext_ln41_2_fu_650_p1(15 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage8) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then 
            image_in_address0_local <= zext_ln43_fu_598_p1(15 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
            image_in_address0_local <= zext_ln42_1_fu_578_p1(15 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
            image_in_address0_local <= zext_ln43_4_fu_564_p1(15 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
            image_in_address0_local <= zext_ln42_7_fu_550_p1(15 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            image_in_address0_local <= zext_ln41_4_fu_536_p1(15 - 1 downto 0);
        else 
            image_in_address0_local <= "XXXXXXXXXXXXXXX";
        end if; 
    end process;


    image_in_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_11001, ap_block_pp0_stage8_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8)) or ((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) 
    or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            image_in_ce0_local <= ap_const_logic_1;
        else 
            image_in_ce0_local <= ap_const_logic_0;
        end if; 
    end process;


    image_out_address0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, zext_ln76_fu_884_p1, zext_ln77_1_fu_974_p1, zext_ln78_fu_1024_p1)
    begin
        if ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                image_out_address0_local <= zext_ln78_fu_1024_p1(15 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                image_out_address0_local <= zext_ln77_1_fu_974_p1(15 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                image_out_address0_local <= zext_ln76_fu_884_p1(15 - 1 downto 0);
            else 
                image_out_address0_local <= "XXXXXXXXXXXXXXX";
            end if;
        else 
            image_out_address0_local <= "XXXXXXXXXXXXXXX";
        end if; 
    end process;


    image_out_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            image_out_ce0_local <= ap_const_logic_1;
        else 
            image_out_ce0_local <= ap_const_logic_0;
        end if; 
    end process;


    image_out_d0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, select_ln76_fu_875_p3, select_ln77_fu_956_p3, select_ln78_fu_1009_p3, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2)
    begin
        if ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                image_out_d0_local <= select_ln78_fu_1009_p3;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                image_out_d0_local <= select_ln77_fu_956_p3;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                image_out_d0_local <= select_ln76_fu_875_p3;
            else 
                image_out_d0_local <= "XXXXXXXX";
            end if;
        else 
            image_out_d0_local <= "XXXXXXXX";
        end if; 
    end process;


    image_out_we0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, icmp_ln33_reg_1203_pp0_iter1_reg, icmp_ln33_reg_1203_pp0_iter2_reg)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln33_reg_1203_pp0_iter1_reg = ap_const_lv1_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (icmp_ln33_reg_1203_pp0_iter2_reg = ap_const_lv1_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln33_reg_1203_pp0_iter1_reg = ap_const_lv1_1)))) then 
            image_out_we0_local <= ap_const_logic_1;
        else 
            image_out_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    j_2_fu_496_p2 <= std_logic_vector(unsigned(select_ln24_fu_488_p3) + unsigned(ap_const_lv7_1));
    j_fu_502_p3 <= 
        j_2_fu_496_p2 when (and_ln24_reg_1166(0) = '1') else 
        select_ln24_fu_488_p3;
    k_fu_455_p2 <= std_logic_vector(unsigned(k_mid2_reg_1181) + unsigned(ap_const_lv2_1));
    k_mid2_fu_412_p3 <= 
        ap_const_lv2_0 when (empty_fu_406_p2(0) = '1') else 
        ap_sig_allocacmp_k22_load;
    mul_ln41_1_fu_687_p0 <= mul_ln41_1_fu_687_p00(8 - 1 downto 0);
    mul_ln41_1_fu_687_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_324),16));
    mul_ln42_1_fu_721_p0 <= mul_ln42_1_fu_721_p00(8 - 1 downto 0);
    mul_ln42_1_fu_721_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_324),16));
    mul_ln42_1_fu_721_p1 <= sext_ln41_1_reg_1343(8 - 1 downto 0);
    mul_ln43_1_fu_736_p0 <= mul_ln43_1_fu_736_p00(8 - 1 downto 0);
    mul_ln43_1_fu_736_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_324),16));
    mul_ln43_1_fu_736_p1 <= sext_ln41_1_reg_1343(8 - 1 downto 0);
    or_ln76_fu_870_p2 <= (tmp_1_fu_837_p3 or icmp_ln54_reg_1457);
    or_ln77_fu_951_p2 <= (tmp_3_fu_918_p3 or icmp_ln61_reg_1474);
    or_ln78_fu_1004_p2 <= (tmp_5_fu_984_p3 or icmp_ln68_reg_1496);
    p_shl_fu_427_p3 <= (k_mid2_reg_1181 & ap_const_lv2_0);
    select_ln24_1_fu_896_p3 <= 
        acc_red_reg_1156_pp0_iter2_reg when (icmp_ln2627_reg_303_pp0_iter2_reg(0) = '1') else 
        acc_blue_123_fu_146;
    select_ln24_2_fu_812_p3 <= 
        acc_red_reg_1156_pp0_iter1_reg when (icmp_ln2627_reg_303_pp0_iter1_reg(0) = '1') else 
        acc_green24_fu_150;
    select_ln24_3_fu_763_p3 <= 
        acc_red_reg_1156_pp0_iter1_reg when (icmp_ln2627_reg_303_pp0_iter1_reg(0) = '1') else 
        acc_red25_fu_154;
    select_ln24_fu_488_p3 <= 
        ap_const_lv7_0 when (icmp_ln2627_reg_303(0) = '1') else 
        j21_fu_138;
    select_ln26_1_fu_615_p3 <= 
        ap_const_lv9_1 when (icmp_ln2627_reg_303(0) = '1') else 
        add_ln26_1_fu_609_p2;
    select_ln76_1_fu_863_p3 <= 
        ap_const_lv8_FF when (icmp_ln54_reg_1457(0) = '1') else 
        ap_const_lv8_0;
    select_ln76_fu_875_p3 <= 
        select_ln76_1_fu_863_p3 when (or_ln76_fu_870_p2(0) = '1') else 
        trunc_ln76_fu_860_p1;
    select_ln77_1_fu_944_p3 <= 
        ap_const_lv8_FF when (icmp_ln61_reg_1474(0) = '1') else 
        ap_const_lv8_0;
    select_ln77_fu_956_p3 <= 
        select_ln77_1_fu_944_p3 when (or_ln77_fu_951_p2(0) = '1') else 
        trunc_ln77_fu_941_p1;
    select_ln78_1_fu_997_p3 <= 
        ap_const_lv8_FF when (icmp_ln68_reg_1496(0) = '1') else 
        ap_const_lv8_0;
    select_ln78_fu_1009_p3 <= 
        select_ln78_1_fu_997_p3 when (or_ln78_fu_1004_p2(0) = '1') else 
        trunc_ln78_fu_994_p1;
        sext_ln41_1_fu_680_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(weights_load_1_reg_1238),16));

        sext_ln41_2_fu_669_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(weights_load_2_reg_1214),16));

        sext_ln41_5_fu_776_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_1068_p3),21));

        sext_ln41_fu_741_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(weights_load_reg_1364),16));

        sext_ln42_4_fu_825_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_1077_p3),21));

        sext_ln43_4_fu_909_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_1085_p3),21));

    sub_ln37_fu_434_p2 <= std_logic_vector(unsigned(p_shl_fu_427_p3) - unsigned(zext_ln33_fu_424_p1));
    tmp_1_fu_837_p3 <= acc_red_1_reg_1446(20 downto 20);
    tmp_2_fu_844_p4 <= acc_green_fu_828_p2(20 downto 8);
    tmp_3_fu_918_p3 <= acc_green_reg_1463(20 downto 20);
    tmp_4_fu_925_p4 <= acc_blue_fu_912_p2(20 downto 8);
    tmp_5_fu_984_p3 <= acc_blue_reg_1490(20 downto 20);
    tmp_fu_788_p4 <= acc_red_1_fu_779_p2(20 downto 8);
    trunc_ln38_fu_440_p1 <= sub_ln37_fu_434_p2(3 - 1 downto 0);
    trunc_ln76_fu_860_p1 <= acc_red_1_reg_1446(8 - 1 downto 0);
    trunc_ln77_fu_941_p1 <= acc_green_reg_1463(8 - 1 downto 0);
    trunc_ln78_fu_994_p1 <= acc_blue_reg_1490(8 - 1 downto 0);

    weights_address0_local_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, zext_ln40_1_fu_450_p1, ap_block_pp0_stage1, zext_ln40_fu_523_p1, ap_block_pp0_stage3, zext_ln38_fu_676_p1, ap_block_pp0_stage2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            weights_address0_local <= zext_ln38_fu_676_p1(4 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            weights_address0_local <= zext_ln40_fu_523_p1(4 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            weights_address0_local <= zext_ln40_1_fu_450_p1(4 - 1 downto 0);
        else 
            weights_address0_local <= "XXXX";
        end if; 
    end process;


    weights_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            weights_ce0_local <= ap_const_logic_1;
        else 
            weights_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln24_fu_386_p2 <= (ap_phi_mux_icmp_ln2627_phi_fu_306_p4 xor ap_const_lv1_1);
    zext_ln26_1_fu_509_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_fu_502_p3),13));
    zext_ln33_fu_424_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_mid2_reg_1181),4));
    zext_ln38_fu_676_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln37_reg_1188_pp0_iter1_reg),64));
    zext_ln40_1_fu_450_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln40_2_fu_444_p2),64));
    zext_ln40_fu_523_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln40_fu_518_p2),64));
    zext_ln41_2_fu_650_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(image_1d_idx_1_fu_645_p2),64));
    zext_ln41_4_fu_536_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(image_1d_idx_2_fu_531_p2),64));
    zext_ln41_fu_710_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(image_1d_idx_reg_1219),64));
    zext_ln42_10_fu_555_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(image_1d_idx_2_reg_1243),15));
    zext_ln42_11_fu_541_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(image_1d_idx_2_reg_1243),14));
    zext_ln42_1_fu_578_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln42_fu_572_p2),64));
    zext_ln42_3_fu_569_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(image_1d_idx_reg_1219),14));
    zext_ln42_4_fu_664_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln42_1_fu_658_p2),64));
    zext_ln42_6_fu_693_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(image_1d_idx_1_reg_1310),15));
    zext_ln42_7_fu_550_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln42_2_fu_544_p2),64));
    zext_ln42_9_fu_655_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(image_1d_idx_1_reg_1310),14));
    zext_ln42_fu_589_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(image_1d_idx_reg_1219),15));
    zext_ln43_2_fu_702_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln43_1_fu_696_p2),64));
    zext_ln43_4_fu_564_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln43_2_fu_558_p2),64));
    zext_ln43_fu_598_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln43_fu_592_p2),64));
    zext_ln76_fu_884_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln76_reg_1279_pp0_iter1_reg),64));
    zext_ln77_1_fu_974_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln77_fu_968_p2),64));
    zext_ln77_2_fu_965_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln76_reg_1279_pp0_iter1_reg),14));
    zext_ln77_fu_991_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln76_reg_1279_pp0_iter1_reg),15));
    zext_ln78_fu_1024_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln78_fu_1018_p2),64));
end behav;
