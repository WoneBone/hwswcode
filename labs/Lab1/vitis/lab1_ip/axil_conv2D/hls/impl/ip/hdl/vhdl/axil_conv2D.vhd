-- ==============================================================
-- Generated by Vitis HLS v2024.1.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity axil_conv2D is
generic (
    C_S_AXI_BUS1_ADDR_WIDTH : INTEGER := 15;
    C_S_AXI_BUS1_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    s_axi_BUS1_AWVALID : IN STD_LOGIC;
    s_axi_BUS1_AWREADY : OUT STD_LOGIC;
    s_axi_BUS1_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_BUS1_ADDR_WIDTH-1 downto 0);
    s_axi_BUS1_WVALID : IN STD_LOGIC;
    s_axi_BUS1_WREADY : OUT STD_LOGIC;
    s_axi_BUS1_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_BUS1_DATA_WIDTH-1 downto 0);
    s_axi_BUS1_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_BUS1_DATA_WIDTH/8-1 downto 0);
    s_axi_BUS1_ARVALID : IN STD_LOGIC;
    s_axi_BUS1_ARREADY : OUT STD_LOGIC;
    s_axi_BUS1_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_BUS1_ADDR_WIDTH-1 downto 0);
    s_axi_BUS1_RVALID : OUT STD_LOGIC;
    s_axi_BUS1_RREADY : IN STD_LOGIC;
    s_axi_BUS1_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_BUS1_DATA_WIDTH-1 downto 0);
    s_axi_BUS1_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_BUS1_BVALID : OUT STD_LOGIC;
    s_axi_BUS1_BREADY : IN STD_LOGIC;
    s_axi_BUS1_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of axil_conv2D is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "axil_conv2D_axil_conv2D,hls_ip_2024_1_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.270000,HLS_SYN_LAT=66574,HLS_SYN_TPT=none,HLS_SYN_MEM=8,HLS_SYN_DSP=0,HLS_SYN_FF=823,HLS_SYN_LUT=1044,HLS_VERSION=2024_1_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant C_S_AXI_DATA_WIDTH : INTEGER := 32;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv15_1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv9_102 : STD_LOGIC_VECTOR (8 downto 0) := "100000010";
    constant ap_const_lv15_56AB : STD_LOGIC_VECTOR (14 downto 0) := "101011010101011";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv13_2 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000010";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv13_58 : STD_LOGIC_VECTOR (12 downto 0) := "0000001011000";
    constant ap_const_lv13_56 : STD_LOGIC_VECTOR (12 downto 0) := "0000001010110";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_ready : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal icmp_ln24_fu_421_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage2 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal image_in_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal weights_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal bias : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln2623_reg_222 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln2623_reg_222_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln2623_reg_222_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal reg_243 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal acc_fu_247_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal acc_reg_719 : STD_LOGIC_VECTOR (20 downto 0);
    signal acc_reg_719_pp0_iter1_reg : STD_LOGIC_VECTOR (20 downto 0);
    signal acc_reg_719_pp0_iter2_reg : STD_LOGIC_VECTOR (20 downto 0);
    signal and_ln24_fu_301_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln24_reg_725 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln24_reg_725_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln24_reg_725_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_2_fu_307_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_2_reg_731 : STD_LOGIC_VECTOR (6 downto 0);
    signal k_mid2_fu_321_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal k_mid2_reg_738 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln26_1_fu_380_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln26_1_reg_750 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal icmp_ln31_fu_389_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_reg_756 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_reg_756_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_reg_756_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln26_fu_415_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln26_reg_761 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_reg_766 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln35_fu_457_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln35_reg_770 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_633_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal image_1d_idx_reg_776 : STD_LOGIC_VECTOR (12 downto 0);
    signal weights_load_1_reg_792 : STD_LOGIC_VECTOR (7 downto 0);
    signal image_out_addr_reg_807 : STD_LOGIC_VECTOR (12 downto 0);
    signal image_out_addr_reg_807_pp0_iter2_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal acc_2_fu_575_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal acc_2_reg_852 : STD_LOGIC_VECTOR (20 downto 0);
    signal icmp_ln44_fu_591_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln44_reg_858 : STD_LOGIC_VECTOR (0 downto 0);
    signal acc_sat_1_fu_624_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_phi_mux_icmp_ln2623_phi_fu_225_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_icmp_ln3122_phi_fu_236_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln39_fu_467_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln38_fu_477_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln38_1_fu_487_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln39_4_fu_497_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln51_fu_502_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln36_fu_506_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal zext_ln39_2_fu_515_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal indvar_flatten1316_fu_118 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    signal add_ln24_fu_395_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal i17_fu_122 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    signal ap_sig_allocacmp_i17_load : STD_LOGIC_VECTOR (6 downto 0);
    signal indvar_flatten18_fu_126 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    signal select_ln26_1_fu_407_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal j19_fu_130 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    signal j_fu_373_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal k20_fu_134 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal k_fu_384_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_sig_allocacmp_k20_load : STD_LOGIC_VECTOR (1 downto 0);
    signal acc_121_fu_138 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000000";
    signal i_124_fu_142 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    signal i_fu_336_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_allocacmp_i_124_load : STD_LOGIC_VECTOR (6 downto 0);
    signal image_in_ce0_local : STD_LOGIC;
    signal image_in_address0_local : STD_LOGIC_VECTOR (12 downto 0);
    signal weights_ce0_local : STD_LOGIC;
    signal weights_address0_local : STD_LOGIC_VECTOR (3 downto 0);
    signal image_out_we0_local : STD_LOGIC;
    signal image_out_ce0_local : STD_LOGIC;
    signal xor_ln24_fu_295_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_fu_315_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln24_fu_359_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_2_fu_367_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln26_1_fu_401_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl_fu_450_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln31_fu_447_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln36_fu_463_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln38_fu_471_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln38_2_fu_482_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal image_1d_idx_2_fu_492_p2 : STD_LOGIC_VECTOR (12 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of image_1d_idx_2_fu_492_p2 : signal is "no";
    signal grp_fu_644_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal image_1d_idx_1_fu_510_p2 : STD_LOGIC_VECTOR (12 downto 0);
    attribute use_dsp48 of image_1d_idx_1_fu_510_p2 : signal is "no";
    signal mul_ln39_1_fu_543_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln39_1_fu_543_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_652_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal select_ln24_1_fu_559_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_661_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal acc_1_mid2_fu_566_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal sext_ln39_5_fu_572_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_fu_581_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_1_fu_602_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_14_fu_619_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal acc_sat_fu_612_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln49_fu_609_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_633_p0 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_633_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_633_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_633_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_644_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_644_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_644_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_652_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_661_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0_1to3 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal grp_fu_633_p00 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_633_p30 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_644_p00 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_652_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_661_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln39_1_fu_543_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_condition_635 : BOOLEAN;
    signal ap_condition_639 : BOOLEAN;
    signal ap_condition_644 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component axil_conv2D_mul_8ns_8s_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component axil_conv2D_ama_addmuladd_2ns_7ns_7ns_7ns_13_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (1 downto 0);
        din1 : IN STD_LOGIC_VECTOR (6 downto 0);
        din2 : IN STD_LOGIC_VECTOR (6 downto 0);
        din3 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;


    component axil_conv2D_mac_muladd_7ns_7ns_7ns_13_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (6 downto 0);
        din1 : IN STD_LOGIC_VECTOR (6 downto 0);
        din2 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;


    component axil_conv2D_mac_muladd_8ns_8s_16s_17_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;


    component axil_conv2D_mac_muladd_8ns_8s_17s_18_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (16 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component axil_conv2D_BUS1_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        weights_address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        weights_ce0 : IN STD_LOGIC;
        weights_q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        bias : OUT STD_LOGIC_VECTOR (31 downto 0);
        image_in_address0 : IN STD_LOGIC_VECTOR (12 downto 0);
        image_in_ce0 : IN STD_LOGIC;
        image_in_q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        image_out_address0 : IN STD_LOGIC_VECTOR (12 downto 0);
        image_out_ce0 : IN STD_LOGIC;
        image_out_we0 : IN STD_LOGIC;
        image_out_d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component axil_conv2D_flow_control_loop_delay_pipe IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_loop_exit_ready_delayed : IN STD_LOGIC );
    end component;



begin
    BUS1_s_axi_U : component axil_conv2D_BUS1_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_BUS1_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_BUS1_DATA_WIDTH)
    port map (
        AWVALID => s_axi_BUS1_AWVALID,
        AWREADY => s_axi_BUS1_AWREADY,
        AWADDR => s_axi_BUS1_AWADDR,
        WVALID => s_axi_BUS1_WVALID,
        WREADY => s_axi_BUS1_WREADY,
        WDATA => s_axi_BUS1_WDATA,
        WSTRB => s_axi_BUS1_WSTRB,
        ARVALID => s_axi_BUS1_ARVALID,
        ARREADY => s_axi_BUS1_ARREADY,
        ARADDR => s_axi_BUS1_ARADDR,
        RVALID => s_axi_BUS1_RVALID,
        RREADY => s_axi_BUS1_RREADY,
        RDATA => s_axi_BUS1_RDATA,
        RRESP => s_axi_BUS1_RRESP,
        BVALID => s_axi_BUS1_BVALID,
        BREADY => s_axi_BUS1_BREADY,
        BRESP => s_axi_BUS1_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        weights_address0 => weights_address0_local,
        weights_ce0 => weights_ce0_local,
        weights_q0 => weights_q0,
        bias => bias,
        image_in_address0 => image_in_address0_local,
        image_in_ce0 => image_in_ce0_local,
        image_in_q0 => image_in_q0,
        image_out_address0 => image_out_addr_reg_807_pp0_iter2_reg,
        image_out_ce0 => image_out_ce0_local,
        image_out_we0 => image_out_we0_local,
        image_out_d0 => acc_sat_1_fu_624_p3,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    mul_8ns_8s_16_1_1_U1 : component axil_conv2D_mul_8ns_8s_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => mul_ln39_1_fu_543_p0,
        din1 => weights_load_1_reg_792,
        dout => mul_ln39_1_fu_543_p2);

    ama_addmuladd_2ns_7ns_7ns_7ns_13_4_1_U2 : component axil_conv2D_ama_addmuladd_2ns_7ns_7ns_7ns_13_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 2,
        din1_WIDTH => 7,
        din2_WIDTH => 7,
        din3_WIDTH => 7,
        dout_WIDTH => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_633_p0,
        din1 => grp_fu_633_p1,
        din2 => grp_fu_633_p2,
        din3 => grp_fu_633_p3,
        ce => ap_const_logic_1,
        dout => grp_fu_633_p4);

    mac_muladd_7ns_7ns_7ns_13_4_1_U3 : component axil_conv2D_mac_muladd_7ns_7ns_7ns_13_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 7,
        din1_WIDTH => 7,
        din2_WIDTH => 7,
        dout_WIDTH => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_644_p0,
        din1 => grp_fu_644_p1,
        din2 => grp_fu_644_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_644_p3);

    mac_muladd_8ns_8s_16s_17_4_1_U4 : component axil_conv2D_mac_muladd_8ns_8s_16s_17_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_652_p0,
        din1 => weights_q0,
        din2 => mul_ln39_1_fu_543_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_652_p3);

    mac_muladd_8ns_8s_17s_18_4_1_U5 : component axil_conv2D_mac_muladd_8ns_8s_17s_18_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 17,
        dout_WIDTH => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_661_p0,
        din1 => weights_q0,
        din2 => grp_fu_652_p3,
        ce => ap_const_logic_1,
        dout => grp_fu_661_p3);

    flow_control_loop_delay_pipe_U : component axil_conv2D_flow_control_loop_delay_pipe
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage2,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int,
        ap_continue => ap_const_logic_1,
        ap_loop_exit_ready_delayed => ap_loop_exit_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    acc_121_fu_138_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_loop_init = ap_const_logic_1))) then 
                    acc_121_fu_138 <= acc_fu_247_p1;
                elsif ((ap_enable_reg_pp0_iter3 = ap_const_logic_1)) then 
                    acc_121_fu_138 <= acc_2_fu_575_p2;
                end if;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter3_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) then
                if (((ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then 
                    ap_loop_exit_ready_pp0_iter3_reg <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage2_11001)) then 
                    ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                end if;
            end if; 
        end if;
    end process;

    i17_fu_122_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
                if ((ap_const_boolean_1 = ap_condition_639)) then 
                    i17_fu_122 <= ap_const_lv7_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    i17_fu_122 <= i_2_reg_731;
                end if;
            end if; 
        end if;
    end process;

    i_124_fu_142_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
                if ((ap_const_boolean_1 = ap_condition_639)) then 
                    i_124_fu_142 <= ap_const_lv7_1;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    i_124_fu_142 <= i_fu_336_p2;
                end if;
            end if; 
        end if;
    end process;

    icmp_ln2623_reg_222_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then
                if ((ap_const_boolean_1 = ap_condition_644)) then 
                    icmp_ln2623_reg_222 <= icmp_ln26_reg_761;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_init = ap_const_logic_1))) then 
                    icmp_ln2623_reg_222 <= ap_const_lv1_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten1316_fu_118_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
                if ((ap_const_boolean_1 = ap_condition_639)) then 
                    indvar_flatten1316_fu_118 <= ap_const_lv15_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    indvar_flatten1316_fu_118 <= add_ln24_fu_395_p2;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten18_fu_126_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
                if ((ap_const_boolean_1 = ap_condition_639)) then 
                    indvar_flatten18_fu_126 <= ap_const_lv9_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    indvar_flatten18_fu_126 <= select_ln26_1_fu_407_p3;
                end if;
            end if; 
        end if;
    end process;

    j19_fu_130_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
                if ((ap_const_boolean_1 = ap_condition_639)) then 
                    j19_fu_130 <= ap_const_lv7_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    j19_fu_130 <= j_fu_373_p3;
                end if;
            end if; 
        end if;
    end process;

    k20_fu_134_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
                if ((ap_const_boolean_1 = ap_condition_639)) then 
                    k20_fu_134 <= ap_const_lv2_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    k20_fu_134 <= k_fu_384_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                acc_2_reg_852 <= acc_2_fu_575_p2;
                acc_reg_719 <= acc_fu_247_p1;
                acc_reg_719_pp0_iter1_reg <= acc_reg_719;
                acc_reg_719_pp0_iter2_reg <= acc_reg_719_pp0_iter1_reg;
                and_ln24_reg_725 <= and_ln24_fu_301_p2;
                and_ln24_reg_725_pp0_iter1_reg <= and_ln24_reg_725;
                and_ln24_reg_725_pp0_iter2_reg <= and_ln24_reg_725_pp0_iter1_reg;
                i_2_reg_731 <= i_2_fu_307_p3;
                icmp_ln2623_reg_222_pp0_iter1_reg <= icmp_ln2623_reg_222;
                icmp_ln2623_reg_222_pp0_iter2_reg <= icmp_ln2623_reg_222_pp0_iter1_reg;
                icmp_ln44_reg_858 <= icmp_ln44_fu_591_p2;
                k_mid2_reg_738 <= k_mid2_fu_321_p3;
                sub_ln35_reg_770 <= sub_ln35_fu_457_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                icmp_ln24_reg_766 <= icmp_ln24_fu_421_p2;
                icmp_ln31_reg_756_pp0_iter1_reg <= icmp_ln31_reg_756;
                icmp_ln31_reg_756_pp0_iter2_reg <= icmp_ln31_reg_756_pp0_iter1_reg;
                    zext_ln26_1_reg_750(6 downto 0) <= zext_ln26_1_fu_380_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                icmp_ln26_reg_761 <= icmp_ln26_fu_415_p2;
                icmp_ln31_reg_756 <= icmp_ln31_fu_389_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                image_1d_idx_reg_776 <= grp_fu_633_p4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                image_out_addr_reg_807 <= zext_ln51_fu_502_p1(13 - 1 downto 0);
                image_out_addr_reg_807_pp0_iter2_reg <= image_out_addr_reg_807;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then
                reg_243 <= image_in_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                weights_load_1_reg_792 <= weights_q0;
            end if;
        end if;
    end process;
    zext_ln26_1_reg_750(12 downto 7) <= "000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage2_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to3, ap_block_pp0_stage1_subdone, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to3 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    acc_1_mid2_fu_566_p3 <= 
        acc_reg_719_pp0_iter2_reg when (and_ln24_reg_725_pp0_iter2_reg(0) = '1') else 
        select_ln24_1_fu_559_p3;
    acc_2_fu_575_p2 <= std_logic_vector(unsigned(acc_1_mid2_fu_566_p3) + unsigned(sext_ln39_5_fu_572_p1));
    acc_fu_247_p1 <= bias(21 - 1 downto 0);
    acc_sat_1_fu_624_p3 <= 
        acc_sat_fu_612_p3 when (empty_14_fu_619_p2(0) = '1') else 
        trunc_ln49_fu_609_p1;
    acc_sat_fu_612_p3 <= 
        ap_const_lv8_FF when (icmp_ln44_reg_858(0) = '1') else 
        ap_const_lv8_0;
    add_ln24_fu_395_p2 <= std_logic_vector(unsigned(indvar_flatten1316_fu_118) + unsigned(ap_const_lv15_1));
    add_ln26_1_fu_401_p2 <= std_logic_vector(unsigned(indvar_flatten18_fu_126) + unsigned(ap_const_lv9_1));
    add_ln38_2_fu_482_p2 <= std_logic_vector(unsigned(sub_ln35_reg_770) + unsigned(ap_const_lv4_2));
    add_ln38_fu_471_p2 <= std_logic_vector(unsigned(trunc_ln36_fu_463_p1) + unsigned(ap_const_lv3_1));
    and_ln24_fu_301_p2 <= (xor_ln24_fu_295_p2 and ap_phi_mux_icmp_ln3122_phi_fu_236_p4);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_635_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln24_reg_766, ap_block_pp0_stage0)
    begin
                ap_condition_635 <= ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln24_reg_766 = ap_const_lv1_0));
    end process;


    ap_condition_639_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_loop_init)
    begin
                ap_condition_639 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_644_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, icmp_ln24_reg_766)
    begin
                ap_condition_644 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln24_reg_766 = ap_const_lv1_0));
    end process;


    ap_condition_exit_pp0_iter0_stage2_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_subdone, icmp_ln24_fu_421_p2)
    begin
        if (((icmp_ln24_fu_421_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            ap_condition_exit_pp0_iter0_stage2 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage2 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter3_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to3_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to3 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_loop_exit_done_int_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_subdone, ap_loop_exit_ready_pp0_iter3_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            ap_loop_exit_done_int <= ap_const_logic_1;
        else 
            ap_loop_exit_done_int <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage2;

    ap_phi_mux_icmp_ln2623_phi_fu_225_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln26_reg_761, ap_loop_init, ap_condition_635)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then
            if ((ap_const_boolean_1 = ap_condition_635)) then 
                ap_phi_mux_icmp_ln2623_phi_fu_225_p4 <= icmp_ln26_reg_761;
            elsif ((ap_loop_init = ap_const_logic_1)) then 
                ap_phi_mux_icmp_ln2623_phi_fu_225_p4 <= ap_const_lv1_0;
            else 
                ap_phi_mux_icmp_ln2623_phi_fu_225_p4 <= icmp_ln26_reg_761;
            end if;
        else 
            ap_phi_mux_icmp_ln2623_phi_fu_225_p4 <= icmp_ln26_reg_761;
        end if; 
    end process;


    ap_phi_mux_icmp_ln3122_phi_fu_236_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln31_reg_756, ap_loop_init, ap_condition_635)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then
            if ((ap_const_boolean_1 = ap_condition_635)) then 
                ap_phi_mux_icmp_ln3122_phi_fu_236_p4 <= icmp_ln31_reg_756;
            elsif ((ap_loop_init = ap_const_logic_1)) then 
                ap_phi_mux_icmp_ln3122_phi_fu_236_p4 <= ap_const_lv1_0;
            else 
                ap_phi_mux_icmp_ln3122_phi_fu_236_p4 <= icmp_ln31_reg_756;
            end if;
        else 
            ap_phi_mux_icmp_ln3122_phi_fu_236_p4 <= icmp_ln31_reg_756;
        end if; 
    end process;

    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_allocacmp_i17_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_loop_init, ap_block_pp0_stage0, i17_fu_122)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i17_load <= ap_const_lv7_0;
        else 
            ap_sig_allocacmp_i17_load <= i17_fu_122;
        end if; 
    end process;


    ap_sig_allocacmp_i_124_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_loop_init, ap_block_pp0_stage0, i_124_fu_142)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i_124_load <= ap_const_lv7_1;
        else 
            ap_sig_allocacmp_i_124_load <= i_124_fu_142;
        end if; 
    end process;


    ap_sig_allocacmp_k20_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_loop_init, ap_block_pp0_stage0, k20_fu_134)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_k20_load <= ap_const_lv2_0;
        else 
            ap_sig_allocacmp_k20_load <= k20_fu_134;
        end if; 
    end process;

    empty_14_fu_619_p2 <= (tmp_1_fu_602_p3 or icmp_ln44_reg_858);
    empty_fu_315_p2 <= (ap_phi_mux_icmp_ln2623_phi_fu_225_p4 or and_ln24_fu_301_p2);
    grp_fu_633_p0 <= grp_fu_633_p00(2 - 1 downto 0);
    grp_fu_633_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_mid2_fu_321_p3),7));
    grp_fu_633_p1 <= 
        ap_sig_allocacmp_i_124_load when (ap_phi_mux_icmp_ln2623_phi_fu_225_p4(0) = '1') else 
        ap_sig_allocacmp_i17_load;
    grp_fu_633_p2 <= ap_const_lv13_58(7 - 1 downto 0);
    grp_fu_633_p3 <= grp_fu_633_p30(7 - 1 downto 0);
    grp_fu_633_p30 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_fu_373_p3),13));
    grp_fu_644_p0 <= grp_fu_644_p00(7 - 1 downto 0);
    grp_fu_644_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_reg_731),13));
    grp_fu_644_p1 <= ap_const_lv13_56(7 - 1 downto 0);
    grp_fu_644_p2 <= zext_ln26_1_reg_750(7 - 1 downto 0);
    grp_fu_652_p0 <= grp_fu_652_p00(8 - 1 downto 0);
    grp_fu_652_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(image_in_q0),16));
    grp_fu_661_p0 <= grp_fu_661_p00(8 - 1 downto 0);
    grp_fu_661_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_243),16));
    i_2_fu_307_p3 <= 
        ap_sig_allocacmp_i_124_load when (ap_phi_mux_icmp_ln2623_phi_fu_225_p4(0) = '1') else 
        ap_sig_allocacmp_i17_load;
    i_fu_336_p2 <= std_logic_vector(unsigned(i_2_reg_731) + unsigned(ap_const_lv7_1));
    icmp_ln24_fu_421_p2 <= "1" when (indvar_flatten1316_fu_118 = ap_const_lv15_56AB) else "0";
    icmp_ln26_fu_415_p2 <= "1" when (select_ln26_1_fu_407_p3 = ap_const_lv9_102) else "0";
    icmp_ln31_fu_389_p2 <= "1" when (k_fu_384_p2 = ap_const_lv2_3) else "0";
    icmp_ln44_fu_591_p2 <= "1" when (signed(tmp_fu_581_p4) > signed(ap_const_lv13_0)) else "0";
    image_1d_idx_1_fu_510_p2 <= std_logic_vector(unsigned(image_1d_idx_reg_776) + unsigned(ap_const_lv13_1));
    image_1d_idx_2_fu_492_p2 <= std_logic_vector(unsigned(image_1d_idx_reg_776) + unsigned(ap_const_lv13_2));

    image_in_address0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0, zext_ln39_fu_467_p1, ap_block_pp0_stage1, zext_ln39_4_fu_497_p1, ap_block_pp0_stage2, zext_ln39_2_fu_515_p1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                image_in_address0_local <= zext_ln39_2_fu_515_p1(13 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                image_in_address0_local <= zext_ln39_4_fu_497_p1(13 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                image_in_address0_local <= zext_ln39_fu_467_p1(13 - 1 downto 0);
            else 
                image_in_address0_local <= "XXXXXXXXXXXXX";
            end if;
        else 
            image_in_address0_local <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    image_in_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then 
            image_in_ce0_local <= ap_const_logic_1;
        else 
            image_in_ce0_local <= ap_const_logic_0;
        end if; 
    end process;


    image_out_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter3, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then 
            image_out_ce0_local <= ap_const_logic_1;
        else 
            image_out_ce0_local <= ap_const_logic_0;
        end if; 
    end process;


    image_out_we0_local_assign_proc : process(ap_enable_reg_pp0_iter3, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, icmp_ln31_reg_756_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln31_reg_756_pp0_iter2_reg = ap_const_lv1_1))) then 
            image_out_we0_local <= ap_const_logic_1;
        else 
            image_out_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    j_2_fu_367_p2 <= std_logic_vector(unsigned(select_ln24_fu_359_p3) + unsigned(ap_const_lv7_1));
    j_fu_373_p3 <= 
        j_2_fu_367_p2 when (and_ln24_reg_725(0) = '1') else 
        select_ln24_fu_359_p3;
    k_fu_384_p2 <= std_logic_vector(unsigned(k_mid2_reg_738) + unsigned(ap_const_lv2_1));
    k_mid2_fu_321_p3 <= 
        ap_const_lv2_0 when (empty_fu_315_p2(0) = '1') else 
        ap_sig_allocacmp_k20_load;
    mul_ln39_1_fu_543_p0 <= mul_ln39_1_fu_543_p00(8 - 1 downto 0);
    mul_ln39_1_fu_543_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_243),16));
    p_shl_fu_450_p3 <= (k_mid2_reg_738 & ap_const_lv2_0);
    select_ln24_1_fu_559_p3 <= 
        acc_reg_719_pp0_iter2_reg when (icmp_ln2623_reg_222_pp0_iter2_reg(0) = '1') else 
        acc_121_fu_138;
    select_ln24_fu_359_p3 <= 
        ap_const_lv7_0 when (icmp_ln2623_reg_222(0) = '1') else 
        j19_fu_130;
    select_ln26_1_fu_407_p3 <= 
        ap_const_lv9_1 when (icmp_ln2623_reg_222(0) = '1') else 
        add_ln26_1_fu_401_p2;
        sext_ln39_5_fu_572_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_661_p3),21));

    sub_ln35_fu_457_p2 <= std_logic_vector(unsigned(p_shl_fu_450_p3) - unsigned(zext_ln31_fu_447_p1));
    tmp_1_fu_602_p3 <= acc_2_reg_852(20 downto 20);
    tmp_fu_581_p4 <= acc_2_fu_575_p2(20 downto 8);
    trunc_ln36_fu_463_p1 <= sub_ln35_fu_457_p2(3 - 1 downto 0);
    trunc_ln49_fu_609_p1 <= acc_2_reg_852(8 - 1 downto 0);

    weights_address0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0, zext_ln38_fu_477_p1, zext_ln38_1_fu_487_p1, ap_block_pp0_stage1, zext_ln36_fu_506_p1, ap_block_pp0_stage2)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                weights_address0_local <= zext_ln36_fu_506_p1(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                weights_address0_local <= zext_ln38_1_fu_487_p1(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                weights_address0_local <= zext_ln38_fu_477_p1(4 - 1 downto 0);
            else 
                weights_address0_local <= "XXXX";
            end if;
        else 
            weights_address0_local <= "XXXX";
        end if; 
    end process;


    weights_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then 
            weights_ce0_local <= ap_const_logic_1;
        else 
            weights_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln24_fu_295_p2 <= (ap_phi_mux_icmp_ln2623_phi_fu_225_p4 xor ap_const_lv1_1);
    zext_ln26_1_fu_380_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_fu_373_p3),13));
    zext_ln31_fu_447_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_mid2_reg_738),4));
    zext_ln36_fu_506_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln35_reg_770),64));
    zext_ln38_1_fu_487_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln38_2_fu_482_p2),64));
    zext_ln38_fu_477_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln38_fu_471_p2),64));
    zext_ln39_2_fu_515_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(image_1d_idx_1_fu_510_p2),64));
    zext_ln39_4_fu_497_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(image_1d_idx_2_fu_492_p2),64));
    zext_ln39_fu_467_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_633_p4),64));
    zext_ln51_fu_502_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_644_p3),64));
end behav;
