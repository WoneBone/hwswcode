// ==============================================================
// Generated by Vitis HLS v2024.1.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="axil_conv2D_axil_conv2D,hls_ip_2024_1_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.768500,HLS_SYN_LAT=179529,HLS_SYN_TPT=none,HLS_SYN_MEM=8,HLS_SYN_DSP=0,HLS_SYN_FF=685,HLS_SYN_LUT=1375,HLS_VERSION=2024_1_2}" *)

module axil_conv2D (
        ap_clk,
        ap_rst_n,
        s_axi_BUS1_AWVALID,
        s_axi_BUS1_AWREADY,
        s_axi_BUS1_AWADDR,
        s_axi_BUS1_WVALID,
        s_axi_BUS1_WREADY,
        s_axi_BUS1_WDATA,
        s_axi_BUS1_WSTRB,
        s_axi_BUS1_ARVALID,
        s_axi_BUS1_ARREADY,
        s_axi_BUS1_ARADDR,
        s_axi_BUS1_RVALID,
        s_axi_BUS1_RREADY,
        s_axi_BUS1_RDATA,
        s_axi_BUS1_RRESP,
        s_axi_BUS1_BVALID,
        s_axi_BUS1_BREADY,
        s_axi_BUS1_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_state3 = 8'd4;
parameter    ap_ST_fsm_state4 = 8'd8;
parameter    ap_ST_fsm_state5 = 8'd16;
parameter    ap_ST_fsm_state6 = 8'd32;
parameter    ap_ST_fsm_state7 = 8'd64;
parameter    ap_ST_fsm_state8 = 8'd128;
parameter    C_S_AXI_BUS1_DATA_WIDTH = 32;
parameter    C_S_AXI_BUS1_ADDR_WIDTH = 15;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_BUS1_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   s_axi_BUS1_AWVALID;
output   s_axi_BUS1_AWREADY;
input  [C_S_AXI_BUS1_ADDR_WIDTH - 1:0] s_axi_BUS1_AWADDR;
input   s_axi_BUS1_WVALID;
output   s_axi_BUS1_WREADY;
input  [C_S_AXI_BUS1_DATA_WIDTH - 1:0] s_axi_BUS1_WDATA;
input  [C_S_AXI_BUS1_WSTRB_WIDTH - 1:0] s_axi_BUS1_WSTRB;
input   s_axi_BUS1_ARVALID;
output   s_axi_BUS1_ARREADY;
input  [C_S_AXI_BUS1_ADDR_WIDTH - 1:0] s_axi_BUS1_ARADDR;
output   s_axi_BUS1_RVALID;
input   s_axi_BUS1_RREADY;
output  [C_S_AXI_BUS1_DATA_WIDTH - 1:0] s_axi_BUS1_RDATA;
output  [1:0] s_axi_BUS1_RRESP;
output   s_axi_BUS1_BVALID;
input   s_axi_BUS1_BREADY;
output  [1:0] s_axi_BUS1_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] image_in_q0;
reg   [10:0] image_out_address0;
reg    image_out_ce0;
reg    image_out_we0;
reg   [31:0] image_out_d0;
wire   [31:0] image_out_q0;
wire   [7:0] weights_q0;
wire   [31:0] bias;
wire   [20:0] acc_fu_172_p1;
reg   [20:0] acc_reg_356;
wire    ap_CS_fsm_state2;
reg   [6:0] i_1_reg_364;
wire    ap_CS_fsm_state3;
wire   [12:0] add_ln28_fu_182_p2;
reg   [12:0] add_ln28_reg_369;
wire   [6:0] i_2_fu_194_p2;
reg   [6:0] i_2_reg_377;
wire   [1:0] trunc_ln56_fu_200_p1;
reg   [1:0] trunc_ln56_reg_382;
wire   [6:0] j_1_fu_210_p2;
reg   [6:0] j_1_reg_390;
wire    ap_CS_fsm_state4;
wire   [1:0] add_ln56_fu_224_p2;
reg   [1:0] add_ln56_reg_395;
reg   [10:0] lshr_ln_reg_400;
reg   [10:0] image_out_addr_reg_405;
wire    ap_CS_fsm_state5;
wire   [31:0] or_ln56_fu_330_p2;
reg   [31:0] or_ln56_reg_410;
wire    ap_CS_fsm_state6;
wire    grp_axil_conv2D_Pipeline_loop_m_fu_143_ap_start;
wire    grp_axil_conv2D_Pipeline_loop_m_fu_143_ap_done;
wire    grp_axil_conv2D_Pipeline_loop_m_fu_143_ap_idle;
wire    grp_axil_conv2D_Pipeline_loop_m_fu_143_ap_ready;
wire   [10:0] grp_axil_conv2D_Pipeline_loop_m_fu_143_image_out_address0;
wire    grp_axil_conv2D_Pipeline_loop_m_fu_143_image_out_ce0;
wire    grp_axil_conv2D_Pipeline_loop_m_fu_143_image_out_we0;
wire   [31:0] grp_axil_conv2D_Pipeline_loop_m_fu_143_image_out_d0;
wire    grp_axil_conv2D_Pipeline_loop_k_fu_149_ap_start;
wire    grp_axil_conv2D_Pipeline_loop_k_fu_149_ap_done;
wire    grp_axil_conv2D_Pipeline_loop_k_fu_149_ap_idle;
wire    grp_axil_conv2D_Pipeline_loop_k_fu_149_ap_ready;
wire   [10:0] grp_axil_conv2D_Pipeline_loop_k_fu_149_image_in_address0;
wire    grp_axil_conv2D_Pipeline_loop_k_fu_149_image_in_ce0;
wire   [3:0] grp_axil_conv2D_Pipeline_loop_k_fu_149_weights_address0;
wire    grp_axil_conv2D_Pipeline_loop_k_fu_149_weights_ce0;
wire   [20:0] grp_axil_conv2D_Pipeline_loop_k_fu_149_acc_1_out;
wire    grp_axil_conv2D_Pipeline_loop_k_fu_149_acc_1_out_ap_vld;
reg   [6:0] j_reg_131;
wire   [0:0] icmp_ln28_fu_188_p2;
wire    ap_CS_fsm_state8;
reg    grp_axil_conv2D_Pipeline_loop_m_fu_143_ap_start_reg;
reg    grp_axil_conv2D_Pipeline_loop_k_fu_149_ap_start_reg;
wire   [0:0] icmp_ln30_fu_204_p2;
wire   [63:0] zext_ln56_1_fu_252_p1;
reg   [12:0] phi_mul_fu_100;
reg   [6:0] i_fu_104;
reg    image_out_ce0_local;
reg   [10:0] image_out_address0_local;
reg    image_out_we0_local;
wire    ap_CS_fsm_state7;
wire   [1:0] trunc_ln56_1_fu_220_p1;
wire   [12:0] zext_ln30_fu_216_p1;
wire   [12:0] add_ln56_1_fu_229_p2;
wire   [12:0] tmp_fu_259_p4;
wire   [0:0] icmp_ln49_fu_269_p2;
wire   [0:0] tmp_1_fu_275_p3;
wire   [0:0] empty_fu_295_p2;
wire   [19:0] acc_sat_2_cast_cast_fu_287_p3;
wire   [19:0] trunc_ln32_fu_283_p1;
wire   [19:0] acc_sat_fu_301_p3;
wire   [4:0] shl_ln_fu_313_p3;
wire   [31:0] zext_ln32_fu_309_p1;
wire   [31:0] zext_ln56_fu_320_p1;
wire   [31:0] shl_ln56_fu_324_p2;
reg   [7:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
reg    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 8'd1;
#0 grp_axil_conv2D_Pipeline_loop_m_fu_143_ap_start_reg = 1'b0;
#0 grp_axil_conv2D_Pipeline_loop_k_fu_149_ap_start_reg = 1'b0;
#0 phi_mul_fu_100 = 13'd0;
#0 i_fu_104 = 7'd0;
end

axil_conv2D_axil_conv2D_Pipeline_loop_m grp_axil_conv2D_Pipeline_loop_m_fu_143(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_axil_conv2D_Pipeline_loop_m_fu_143_ap_start),
    .ap_done(grp_axil_conv2D_Pipeline_loop_m_fu_143_ap_done),
    .ap_idle(grp_axil_conv2D_Pipeline_loop_m_fu_143_ap_idle),
    .ap_ready(grp_axil_conv2D_Pipeline_loop_m_fu_143_ap_ready),
    .image_out_address0(grp_axil_conv2D_Pipeline_loop_m_fu_143_image_out_address0),
    .image_out_ce0(grp_axil_conv2D_Pipeline_loop_m_fu_143_image_out_ce0),
    .image_out_we0(grp_axil_conv2D_Pipeline_loop_m_fu_143_image_out_we0),
    .image_out_d0(grp_axil_conv2D_Pipeline_loop_m_fu_143_image_out_d0)
);

axil_conv2D_axil_conv2D_Pipeline_loop_k grp_axil_conv2D_Pipeline_loop_k_fu_149(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_axil_conv2D_Pipeline_loop_k_fu_149_ap_start),
    .ap_done(grp_axil_conv2D_Pipeline_loop_k_fu_149_ap_done),
    .ap_idle(grp_axil_conv2D_Pipeline_loop_k_fu_149_ap_idle),
    .ap_ready(grp_axil_conv2D_Pipeline_loop_k_fu_149_ap_ready),
    .empty(acc_reg_356),
    .i(i_1_reg_364),
    .zext_ln30(j_reg_131),
    .image_in_address0(grp_axil_conv2D_Pipeline_loop_k_fu_149_image_in_address0),
    .image_in_ce0(grp_axil_conv2D_Pipeline_loop_k_fu_149_image_in_ce0),
    .image_in_q0(image_in_q0),
    .weights_address0(grp_axil_conv2D_Pipeline_loop_k_fu_149_weights_address0),
    .weights_ce0(grp_axil_conv2D_Pipeline_loop_k_fu_149_weights_ce0),
    .weights_q0(weights_q0),
    .acc_1_out(grp_axil_conv2D_Pipeline_loop_k_fu_149_acc_1_out),
    .acc_1_out_ap_vld(grp_axil_conv2D_Pipeline_loop_k_fu_149_acc_1_out_ap_vld)
);

axil_conv2D_BUS1_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_BUS1_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_BUS1_DATA_WIDTH ))
BUS1_s_axi_U(
    .AWVALID(s_axi_BUS1_AWVALID),
    .AWREADY(s_axi_BUS1_AWREADY),
    .AWADDR(s_axi_BUS1_AWADDR),
    .WVALID(s_axi_BUS1_WVALID),
    .WREADY(s_axi_BUS1_WREADY),
    .WDATA(s_axi_BUS1_WDATA),
    .WSTRB(s_axi_BUS1_WSTRB),
    .ARVALID(s_axi_BUS1_ARVALID),
    .ARREADY(s_axi_BUS1_ARREADY),
    .ARADDR(s_axi_BUS1_ARADDR),
    .RVALID(s_axi_BUS1_RVALID),
    .RREADY(s_axi_BUS1_RREADY),
    .RDATA(s_axi_BUS1_RDATA),
    .RRESP(s_axi_BUS1_RRESP),
    .BVALID(s_axi_BUS1_BVALID),
    .BREADY(s_axi_BUS1_BREADY),
    .BRESP(s_axi_BUS1_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .weights_address0(grp_axil_conv2D_Pipeline_loop_k_fu_149_weights_address0),
    .weights_ce0(grp_axil_conv2D_Pipeline_loop_k_fu_149_weights_ce0),
    .weights_q0(weights_q0),
    .bias(bias),
    .image_in_address0(grp_axil_conv2D_Pipeline_loop_k_fu_149_image_in_address0),
    .image_in_ce0(grp_axil_conv2D_Pipeline_loop_k_fu_149_image_in_ce0),
    .image_in_q0(image_in_q0),
    .image_out_address0(image_out_address0),
    .image_out_ce0(image_out_ce0),
    .image_out_we0(image_out_we0),
    .image_out_d0(image_out_d0),
    .image_out_q0(image_out_q0),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_axil_conv2D_Pipeline_loop_k_fu_149_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln30_fu_204_p2 == 1'd0))) begin
            grp_axil_conv2D_Pipeline_loop_k_fu_149_ap_start_reg <= 1'b1;
        end else if ((grp_axil_conv2D_Pipeline_loop_k_fu_149_ap_ready == 1'b1)) begin
            grp_axil_conv2D_Pipeline_loop_k_fu_149_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_axil_conv2D_Pipeline_loop_m_fu_143_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            grp_axil_conv2D_Pipeline_loop_m_fu_143_ap_start_reg <= 1'b1;
        end else if ((grp_axil_conv2D_Pipeline_loop_m_fu_143_ap_ready == 1'b1)) begin
            grp_axil_conv2D_Pipeline_loop_m_fu_143_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_fu_104 <= 7'd0;
    end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln30_fu_204_p2 == 1'd1))) begin
        i_fu_104 <= i_2_reg_377;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        j_reg_131 <= j_1_reg_390;
    end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln28_fu_188_p2 == 1'd0))) begin
        j_reg_131 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_mul_fu_100 <= 13'd0;
    end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln30_fu_204_p2 == 1'd1))) begin
        phi_mul_fu_100 <= add_ln28_reg_369;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        acc_reg_356 <= acc_fu_172_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln28_reg_369 <= add_ln28_fu_182_p2;
        i_1_reg_364 <= i_fu_104;
        i_2_reg_377 <= i_2_fu_194_p2;
        trunc_ln56_reg_382 <= trunc_ln56_fu_200_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        add_ln56_reg_395 <= add_ln56_fu_224_p2;
        j_1_reg_390 <= j_1_fu_210_p2;
        lshr_ln_reg_400 <= {{add_ln56_1_fu_229_p2[12:2]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        image_out_addr_reg_405 <= zext_ln56_1_fu_252_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        or_ln56_reg_410 <= or_ln56_fu_330_p2;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((grp_axil_conv2D_Pipeline_loop_m_fu_143_ap_done == 1'b0)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

always @ (*) begin
    if ((grp_axil_conv2D_Pipeline_loop_k_fu_149_ap_done == 1'b0)) begin
        ap_ST_fsm_state5_blk = 1'b1;
    end else begin
        ap_ST_fsm_state5_blk = 1'b0;
    end
end

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln28_fu_188_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln28_fu_188_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        image_out_address0 = grp_axil_conv2D_Pipeline_loop_m_fu_143_image_out_address0;
    end else begin
        image_out_address0 = image_out_address0_local;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        image_out_address0_local = image_out_addr_reg_405;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        image_out_address0_local = zext_ln56_1_fu_252_p1;
    end else begin
        image_out_address0_local = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        image_out_ce0 = grp_axil_conv2D_Pipeline_loop_m_fu_143_image_out_ce0;
    end else begin
        image_out_ce0 = image_out_ce0_local;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state8) | ((1'b1 == ap_CS_fsm_state5) & (grp_axil_conv2D_Pipeline_loop_k_fu_149_ap_done == 1'b1)))) begin
        image_out_ce0_local = 1'b1;
    end else begin
        image_out_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        image_out_d0 = grp_axil_conv2D_Pipeline_loop_m_fu_143_image_out_d0;
    end else begin
        image_out_d0 = or_ln56_reg_410;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        image_out_we0 = grp_axil_conv2D_Pipeline_loop_m_fu_143_image_out_we0;
    end else begin
        image_out_we0 = image_out_we0_local;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        image_out_we0_local = 1'b1;
    end else begin
        image_out_we0_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((grp_axil_conv2D_Pipeline_loop_m_fu_143_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln28_fu_188_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln30_fu_204_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (grp_axil_conv2D_Pipeline_loop_k_fu_149_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign acc_fu_172_p1 = bias[20:0];

assign acc_sat_2_cast_cast_fu_287_p3 = ((icmp_ln49_fu_269_p2[0:0] == 1'b1) ? 20'd255 : 20'd0);

assign acc_sat_fu_301_p3 = ((empty_fu_295_p2[0:0] == 1'b1) ? acc_sat_2_cast_cast_fu_287_p3 : trunc_ln32_fu_283_p1);

assign add_ln28_fu_182_p2 = (phi_mul_fu_100 + 13'd86);

assign add_ln56_1_fu_229_p2 = (phi_mul_fu_100 + zext_ln30_fu_216_p1);

assign add_ln56_fu_224_p2 = (trunc_ln56_reg_382 + trunc_ln56_1_fu_220_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign empty_fu_295_p2 = (tmp_1_fu_275_p3 | icmp_ln49_fu_269_p2);

assign grp_axil_conv2D_Pipeline_loop_k_fu_149_ap_start = grp_axil_conv2D_Pipeline_loop_k_fu_149_ap_start_reg;

assign grp_axil_conv2D_Pipeline_loop_m_fu_143_ap_start = grp_axil_conv2D_Pipeline_loop_m_fu_143_ap_start_reg;

assign i_2_fu_194_p2 = (i_fu_104 + 7'd1);

assign icmp_ln28_fu_188_p2 = ((i_fu_104 == 7'd86) ? 1'b1 : 1'b0);

assign icmp_ln30_fu_204_p2 = ((j_reg_131 == 7'd86) ? 1'b1 : 1'b0);

assign icmp_ln49_fu_269_p2 = (($signed(tmp_fu_259_p4) > $signed(13'd0)) ? 1'b1 : 1'b0);

assign j_1_fu_210_p2 = (j_reg_131 + 7'd1);

assign or_ln56_fu_330_p2 = (shl_ln56_fu_324_p2 | image_out_q0);

assign shl_ln56_fu_324_p2 = zext_ln32_fu_309_p1 << zext_ln56_fu_320_p1;

assign shl_ln_fu_313_p3 = {{add_ln56_reg_395}, {3'd0}};

assign tmp_1_fu_275_p3 = grp_axil_conv2D_Pipeline_loop_k_fu_149_acc_1_out[32'd20];

assign tmp_fu_259_p4 = {{grp_axil_conv2D_Pipeline_loop_k_fu_149_acc_1_out[20:8]}};

assign trunc_ln32_fu_283_p1 = grp_axil_conv2D_Pipeline_loop_k_fu_149_acc_1_out[19:0];

assign trunc_ln56_1_fu_220_p1 = j_reg_131[1:0];

assign trunc_ln56_fu_200_p1 = phi_mul_fu_100[1:0];

assign zext_ln30_fu_216_p1 = j_reg_131;

assign zext_ln32_fu_309_p1 = acc_sat_fu_301_p3;

assign zext_ln56_1_fu_252_p1 = lshr_ln_reg_400;

assign zext_ln56_fu_320_p1 = shl_ln_fu_313_p3;

endmodule //axil_conv2D
