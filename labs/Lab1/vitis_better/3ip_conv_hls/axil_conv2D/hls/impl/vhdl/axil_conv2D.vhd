-- ==============================================================
-- Generated by Vitis HLS v2024.1.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity axil_conv2D is
generic (
    C_S_AXI_BUS1_ADDR_WIDTH : INTEGER := 15;
    C_S_AXI_BUS1_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    s_axi_BUS1_AWVALID : IN STD_LOGIC;
    s_axi_BUS1_AWREADY : OUT STD_LOGIC;
    s_axi_BUS1_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_BUS1_ADDR_WIDTH-1 downto 0);
    s_axi_BUS1_WVALID : IN STD_LOGIC;
    s_axi_BUS1_WREADY : OUT STD_LOGIC;
    s_axi_BUS1_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_BUS1_DATA_WIDTH-1 downto 0);
    s_axi_BUS1_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_BUS1_DATA_WIDTH/8-1 downto 0);
    s_axi_BUS1_ARVALID : IN STD_LOGIC;
    s_axi_BUS1_ARREADY : OUT STD_LOGIC;
    s_axi_BUS1_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_BUS1_ADDR_WIDTH-1 downto 0);
    s_axi_BUS1_RVALID : OUT STD_LOGIC;
    s_axi_BUS1_RREADY : IN STD_LOGIC;
    s_axi_BUS1_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_BUS1_DATA_WIDTH-1 downto 0);
    s_axi_BUS1_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_BUS1_BVALID : OUT STD_LOGIC;
    s_axi_BUS1_BREADY : IN STD_LOGIC;
    s_axi_BUS1_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of axil_conv2D is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "axil_conv2D_axil_conv2D,hls_ip_2024_1_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.768500,HLS_SYN_LAT=177677,HLS_SYN_TPT=none,HLS_SYN_MEM=8,HLS_SYN_DSP=0,HLS_SYN_FF=669,HLS_SYN_LUT=1271,HLS_VERSION=2024_1_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant C_S_AXI_DATA_WIDTH : INTEGER := 32;
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv13_56 : STD_LOGIC_VECTOR (12 downto 0) := "0000001010110";
    constant ap_const_lv7_56 : STD_LOGIC_VECTOR (6 downto 0) := "1010110";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv20_FF : STD_LOGIC_VECTOR (19 downto 0) := "00000000000011111111";
    constant ap_const_lv20_0 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal image_in_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal image_out_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal weights_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal bias : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_fu_154_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal acc_reg_348 : STD_LOGIC_VECTOR (20 downto 0);
    signal i_1_reg_356 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln28_fu_174_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln28_reg_361 : STD_LOGIC_VECTOR (12 downto 0);
    signal i_2_fu_186_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_2_reg_369 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln56_fu_192_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln56_reg_374 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_1_fu_202_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_1_reg_382 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal add_ln56_fu_216_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln56_reg_387 : STD_LOGIC_VECTOR (1 downto 0);
    signal lshr_ln_reg_392 : STD_LOGIC_VECTOR (10 downto 0);
    signal image_out_addr_reg_397 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal or_ln56_fu_322_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln56_reg_402 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_axil_conv2D_Pipeline_loop_k_fu_141_ap_start : STD_LOGIC;
    signal grp_axil_conv2D_Pipeline_loop_k_fu_141_ap_done : STD_LOGIC;
    signal grp_axil_conv2D_Pipeline_loop_k_fu_141_ap_idle : STD_LOGIC;
    signal grp_axil_conv2D_Pipeline_loop_k_fu_141_ap_ready : STD_LOGIC;
    signal grp_axil_conv2D_Pipeline_loop_k_fu_141_image_in_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_axil_conv2D_Pipeline_loop_k_fu_141_image_in_ce0 : STD_LOGIC;
    signal grp_axil_conv2D_Pipeline_loop_k_fu_141_weights_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_axil_conv2D_Pipeline_loop_k_fu_141_weights_ce0 : STD_LOGIC;
    signal grp_axil_conv2D_Pipeline_loop_k_fu_141_acc_1_out : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_axil_conv2D_Pipeline_loop_k_fu_141_acc_1_out_ap_vld : STD_LOGIC;
    signal j_reg_129 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln28_fu_180_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal grp_axil_conv2D_Pipeline_loop_k_fu_141_ap_start_reg : STD_LOGIC := '0';
    signal icmp_ln30_fu_196_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln56_1_fu_244_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal phi_mul_fu_98 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    signal i_fu_102 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    signal image_out_ce0_local : STD_LOGIC;
    signal image_out_address0_local : STD_LOGIC_VECTOR (10 downto 0);
    signal image_out_we0_local : STD_LOGIC;
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal trunc_ln56_1_fu_212_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln30_fu_208_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln56_1_fu_221_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_fu_251_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal icmp_ln49_fu_261_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_267_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_fu_287_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal acc_sat_2_cast_cast_fu_279_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal trunc_ln32_fu_275_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal acc_sat_fu_293_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal shl_ln_fu_305_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln32_fu_301_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln56_fu_312_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln56_fu_316_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component axil_conv2D_axil_conv2D_Pipeline_loop_k IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        empty : IN STD_LOGIC_VECTOR (20 downto 0);
        i : IN STD_LOGIC_VECTOR (6 downto 0);
        zext_ln30 : IN STD_LOGIC_VECTOR (6 downto 0);
        image_in_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        image_in_ce0 : OUT STD_LOGIC;
        image_in_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        weights_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        weights_ce0 : OUT STD_LOGIC;
        weights_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        acc_1_out : OUT STD_LOGIC_VECTOR (20 downto 0);
        acc_1_out_ap_vld : OUT STD_LOGIC );
    end component;


    component axil_conv2D_BUS1_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        weights_address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        weights_ce0 : IN STD_LOGIC;
        weights_q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        bias : OUT STD_LOGIC_VECTOR (31 downto 0);
        image_in_address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        image_in_ce0 : IN STD_LOGIC;
        image_in_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        image_out_address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        image_out_ce0 : IN STD_LOGIC;
        image_out_we0 : IN STD_LOGIC;
        image_out_d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        image_out_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;



begin
    grp_axil_conv2D_Pipeline_loop_k_fu_141 : component axil_conv2D_axil_conv2D_Pipeline_loop_k
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_axil_conv2D_Pipeline_loop_k_fu_141_ap_start,
        ap_done => grp_axil_conv2D_Pipeline_loop_k_fu_141_ap_done,
        ap_idle => grp_axil_conv2D_Pipeline_loop_k_fu_141_ap_idle,
        ap_ready => grp_axil_conv2D_Pipeline_loop_k_fu_141_ap_ready,
        empty => acc_reg_348,
        i => i_1_reg_356,
        zext_ln30 => j_reg_129,
        image_in_address0 => grp_axil_conv2D_Pipeline_loop_k_fu_141_image_in_address0,
        image_in_ce0 => grp_axil_conv2D_Pipeline_loop_k_fu_141_image_in_ce0,
        image_in_q0 => image_in_q0,
        weights_address0 => grp_axil_conv2D_Pipeline_loop_k_fu_141_weights_address0,
        weights_ce0 => grp_axil_conv2D_Pipeline_loop_k_fu_141_weights_ce0,
        weights_q0 => weights_q0,
        acc_1_out => grp_axil_conv2D_Pipeline_loop_k_fu_141_acc_1_out,
        acc_1_out_ap_vld => grp_axil_conv2D_Pipeline_loop_k_fu_141_acc_1_out_ap_vld);

    BUS1_s_axi_U : component axil_conv2D_BUS1_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_BUS1_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_BUS1_DATA_WIDTH)
    port map (
        AWVALID => s_axi_BUS1_AWVALID,
        AWREADY => s_axi_BUS1_AWREADY,
        AWADDR => s_axi_BUS1_AWADDR,
        WVALID => s_axi_BUS1_WVALID,
        WREADY => s_axi_BUS1_WREADY,
        WDATA => s_axi_BUS1_WDATA,
        WSTRB => s_axi_BUS1_WSTRB,
        ARVALID => s_axi_BUS1_ARVALID,
        ARREADY => s_axi_BUS1_ARREADY,
        ARADDR => s_axi_BUS1_ARADDR,
        RVALID => s_axi_BUS1_RVALID,
        RREADY => s_axi_BUS1_RREADY,
        RDATA => s_axi_BUS1_RDATA,
        RRESP => s_axi_BUS1_RRESP,
        BVALID => s_axi_BUS1_BVALID,
        BREADY => s_axi_BUS1_BREADY,
        BRESP => s_axi_BUS1_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        weights_address0 => grp_axil_conv2D_Pipeline_loop_k_fu_141_weights_address0,
        weights_ce0 => grp_axil_conv2D_Pipeline_loop_k_fu_141_weights_ce0,
        weights_q0 => weights_q0,
        bias => bias,
        image_in_address0 => grp_axil_conv2D_Pipeline_loop_k_fu_141_image_in_address0,
        image_in_ce0 => grp_axil_conv2D_Pipeline_loop_k_fu_141_image_in_ce0,
        image_in_q0 => image_in_q0,
        image_out_address0 => image_out_address0_local,
        image_out_ce0 => image_out_ce0_local,
        image_out_we0 => image_out_we0_local,
        image_out_d0 => or_ln56_reg_402,
        image_out_q0 => image_out_q0,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_axil_conv2D_Pipeline_loop_k_fu_141_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_axil_conv2D_Pipeline_loop_k_fu_141_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln30_fu_196_p2 = ap_const_lv1_0))) then 
                    grp_axil_conv2D_Pipeline_loop_k_fu_141_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_axil_conv2D_Pipeline_loop_k_fu_141_ap_ready = ap_const_logic_1)) then 
                    grp_axil_conv2D_Pipeline_loop_k_fu_141_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_fu_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_fu_102 <= ap_const_lv7_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln30_fu_196_p2 = ap_const_lv1_1))) then 
                i_fu_102 <= i_2_reg_369;
            end if; 
        end if;
    end process;

    j_reg_129_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                j_reg_129 <= j_1_reg_382;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln28_fu_180_p2 = ap_const_lv1_0))) then 
                j_reg_129 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    phi_mul_fu_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                phi_mul_fu_98 <= ap_const_lv13_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln30_fu_196_p2 = ap_const_lv1_1))) then 
                phi_mul_fu_98 <= add_ln28_reg_361;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                acc_reg_348 <= acc_fu_154_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln28_reg_361 <= add_ln28_fu_174_p2;
                i_1_reg_356 <= i_fu_102;
                i_2_reg_369 <= i_2_fu_186_p2;
                trunc_ln56_reg_374 <= trunc_ln56_fu_192_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add_ln56_reg_387 <= add_ln56_fu_216_p2;
                j_1_reg_382 <= j_1_fu_202_p2;
                lshr_ln_reg_392 <= add_ln56_1_fu_221_p2(12 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                image_out_addr_reg_397 <= zext_ln56_1_fu_244_p1(11 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                or_ln56_reg_402 <= or_ln56_fu_322_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, grp_axil_conv2D_Pipeline_loop_k_fu_141_ap_done, icmp_ln28_fu_180_p2, icmp_ln30_fu_196_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln28_fu_180_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln30_fu_196_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((grp_axil_conv2D_Pipeline_loop_k_fu_141_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    acc_fu_154_p1 <= bias(21 - 1 downto 0);
    acc_sat_2_cast_cast_fu_279_p3 <= 
        ap_const_lv20_FF when (icmp_ln49_fu_261_p2(0) = '1') else 
        ap_const_lv20_0;
    acc_sat_fu_293_p3 <= 
        acc_sat_2_cast_cast_fu_279_p3 when (empty_fu_287_p2(0) = '1') else 
        trunc_ln32_fu_275_p1;
    add_ln28_fu_174_p2 <= std_logic_vector(unsigned(phi_mul_fu_98) + unsigned(ap_const_lv13_56));
    add_ln56_1_fu_221_p2 <= std_logic_vector(unsigned(phi_mul_fu_98) + unsigned(zext_ln30_fu_208_p1));
    add_ln56_fu_216_p2 <= std_logic_vector(unsigned(trunc_ln56_reg_374) + unsigned(trunc_ln56_1_fu_212_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;

    ap_ST_fsm_state4_blk_assign_proc : process(grp_axil_conv2D_Pipeline_loop_k_fu_141_ap_done)
    begin
        if ((grp_axil_conv2D_Pipeline_loop_k_fu_141_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_CS_fsm_state2, icmp_ln28_fu_180_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln28_fu_180_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln28_fu_180_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln28_fu_180_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    empty_fu_287_p2 <= (tmp_1_fu_267_p3 or icmp_ln49_fu_261_p2);
    grp_axil_conv2D_Pipeline_loop_k_fu_141_ap_start <= grp_axil_conv2D_Pipeline_loop_k_fu_141_ap_start_reg;
    i_2_fu_186_p2 <= std_logic_vector(unsigned(i_fu_102) + unsigned(ap_const_lv7_1));
    icmp_ln28_fu_180_p2 <= "1" when (i_fu_102 = ap_const_lv7_56) else "0";
    icmp_ln30_fu_196_p2 <= "1" when (j_reg_129 = ap_const_lv7_56) else "0";
    icmp_ln49_fu_261_p2 <= "1" when (signed(tmp_fu_251_p4) > signed(ap_const_lv13_0)) else "0";

    image_out_address0_local_assign_proc : process(image_out_addr_reg_397, ap_CS_fsm_state4, zext_ln56_1_fu_244_p1, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            image_out_address0_local <= image_out_addr_reg_397;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            image_out_address0_local <= zext_ln56_1_fu_244_p1(11 - 1 downto 0);
        else 
            image_out_address0_local <= "XXXXXXXXXXX";
        end if; 
    end process;


    image_out_ce0_local_assign_proc : process(ap_CS_fsm_state4, grp_axil_conv2D_Pipeline_loop_k_fu_141_ap_done, ap_CS_fsm_state7, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state7) or ((grp_axil_conv2D_Pipeline_loop_k_fu_141_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            image_out_ce0_local <= ap_const_logic_1;
        else 
            image_out_ce0_local <= ap_const_logic_0;
        end if; 
    end process;


    image_out_we0_local_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            image_out_we0_local <= ap_const_logic_1;
        else 
            image_out_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    j_1_fu_202_p2 <= std_logic_vector(unsigned(j_reg_129) + unsigned(ap_const_lv7_1));
    or_ln56_fu_322_p2 <= (shl_ln56_fu_316_p2 or image_out_q0);
    shl_ln56_fu_316_p2 <= std_logic_vector(shift_left(unsigned(zext_ln32_fu_301_p1),to_integer(unsigned('0' & zext_ln56_fu_312_p1(31-1 downto 0)))));
    shl_ln_fu_305_p3 <= (add_ln56_reg_387 & ap_const_lv3_0);
    tmp_1_fu_267_p3 <= grp_axil_conv2D_Pipeline_loop_k_fu_141_acc_1_out(20 downto 20);
    tmp_fu_251_p4 <= grp_axil_conv2D_Pipeline_loop_k_fu_141_acc_1_out(20 downto 8);
    trunc_ln32_fu_275_p1 <= grp_axil_conv2D_Pipeline_loop_k_fu_141_acc_1_out(20 - 1 downto 0);
    trunc_ln56_1_fu_212_p1 <= j_reg_129(2 - 1 downto 0);
    trunc_ln56_fu_192_p1 <= phi_mul_fu_98(2 - 1 downto 0);
    zext_ln30_fu_208_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_129),13));
    zext_ln32_fu_301_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(acc_sat_fu_293_p3),32));
    zext_ln56_1_fu_244_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_reg_392),64));
    zext_ln56_fu_312_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_305_p3),32));
end behav;
